{"version":3,"sources":["api/ColorUtil.js","assets/clippy.svg","components/Picker.js","components/Swatch.js","components/Scheme.js","components/Easel.js","api/ColorNameUtil.js","api/PickerCreator.js","App.js","index.js"],"names":["createColor","input","tinycolor","complementary","complement","toHexString","clone","rdfc","outOfBounds","value","max","parseInt","isInvalidHexInput","RegExp","test","isPartialHexInput","hasSelection","element","selectionEnd","selectionStart","Picker","pickerInstance","values","colorNameUtil","setEaselColor","useState","temp","setTemp","colorName","setColorName","hex","comp","setComp","colorPicker","useRef","updateColorName","useCallback","color","getColor","undefined","getNearestColor","name","updateRgb","tempRgb","set","hsl","updateHsl","tempHsl","rgb","updateHex","tempHex","handleKeyDown","e","index","target","length","key","handleKeyPress","digits","splice","tempValue","join","startsWith","isInvalidInput","preventDefault","handleNamePress","window","getSelection","toString","toUpperCase","chars","handleHexKeyPress","hexValues","handlePaste","textData","clipboardData","getData","Number","isNaN","count","handleHexPaste","handleRgbBlur","prop","handleHslBlur","handleNameBlur","handleRgbChange","handleHslChange","handleHexChange","handleNameChange","getHex","hexFromName","str","hash","i","charCodeAt","substr","stringToColor","useEffect","updateValues","isColorChanging","handleMouseDown","current","contains","handleMouseMove","handleMouseUp","document","addEventListener","removeEventListener","className","ref","style","backgroundColor","id","type","maxLength","onKeyDown","onKeyPress","onBlur","onChange","data-clipboard-target","width","src","clippy","alt","onPaste","r","g","b","h","s","l","Swatch","colorId","removeColor","changeColor","currentColor","setCurrentColor","changeColorToCurrent","handleBlur","handleChange","handleRemove","onClick","Scheme","schemeId","remove","easelColor","colors","setColors","split","setName","addColor","includes","filter","otherColor","replacement","map","rename","defaultPickerName","Clipboard","constructor","this","namedColors","nearestColors","nearestColor","from","reduce","o","Object","assign","getAllColors","find","pickerName","generate","iro","ColorPicker","borderWidth","borderColor","on","hexString","Easel","schemes","setSchemes","removeScheme","scheme","otherScheme","App","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.01ce6586.chunk.js","sourcesContent":["// Wrapper for color manipulation libraries\nimport tinycolor from 'tinycolor2';\n\n// Create the color object from an input\nfunction createColor(input) {\n  return tinycolor(input);\n}\n\n// Spin the hue around the color wheel\nexport function spinHue(input, amount) {\n  const color = createColor(input);\n  return color.spin(amount).toHexString();\n}\n\n// Get a randomly generated color in hex\nexport function random() {\n  return tinycolor.random().toHexString();\n}\n\n// Get the complementary color in hex\nexport function complementary(input) {\n  const color = createColor(input);\n  return color.complement().toHexString();\n}\n\n// Get the analogous colors in hex\nexport function analogous(input) {\n  const color = createColor(input);\n  return color.analogous()\n    .map((c) => c.toHexString());\n}\n\n// Get the monochromatic colors in hex\nexport function monochromatic(input) {\n  const color = createColor(input);\n  return color.monochromatic()\n    .map((c) => c.toHexString());\n}\n\n// Get the split complement colors in hex\nexport function splitComplement(input) {\n  const color = createColor(input);\n  return color.splitcomplement()\n    .map((c) => c.toHexString());\n}\n\n// Get the triad colors in hex\nexport function triad(input) {\n  const color = createColor(input);\n  return color.triad()\n    .map((c) => c.toHexString());\n}\n\n// Get the tetrad colors in hex\nexport function tetrad(input) {\n  const color = createColor(input);\n  return color.tetrad()\n    .map((c) => c.toHexString());\n}\n\nexport default {\n  spinHue,\n  random,\n  complementary,\n  analogous,\n  monochromatic,\n  splitComplement,\n  triad,\n  tetrad,\n};\n","export default __webpack_public_path__ + \"static/media/clippy.89bd48cb.svg\";","import React, { useState, useEffect, useCallback, useRef } from 'react';\nimport rdfc from 'rfdc';\nimport { complementary } from '../api/ColorUtil';\nimport clippy from '../assets/clippy.svg';\nimport './Picker.css';\n\nconst clone = rdfc();\n\n// Check if value exceeds max\nconst outOfBounds = (value, max) => parseInt(value, 10) > max;\n\n// Check for invalid HSL and RGB input\nconst isInvalidInput = (value) => {\n  const hslRgbPattern = RegExp('^[0-9]{1,3}$');\n  return !hslRgbPattern.test(value)\n  || (value.startsWith('0') && value.length > 1);\n};\n\n// Check for invalid Hex input\nconst isInvalidHexInput = (value) => {\n  const hexPattern = RegExp('^#?([a-fA-F0-9]{6}|[a-fA-F0-9]{3})$');\n  return !hexPattern.test(value);\n};\n\n// Check for partial hex input\nconst isPartialHexInput = (value) => {\n  const partialHexPattern = RegExp(`^#([a-fA-F0-9]{0,2}|[a-fA-F0-9]{4,5})$|\n  ^([a-fA-F0-9]{1,2}|[a-fA-F0-9]{4,5})$`);\n  return partialHexPattern.test(value);\n};\n\n// Determine if document has a selection\nconst hasSelection = (element) => element.selectionEnd - element.selectionStart !== 0;\n\n// Convert any string to a valid hex color\nconst stringToColor = (str) => {\n  let hash = 0;\n  for (let i = 0; i < str.length; i++) {\n    hash = str.charCodeAt(i) + ((hash << 5) - hash);\n  }\n  let color = '#';\n  for (let i = 0; i < 3; i++) {\n    const value = (hash >> (i * 8)) & 0xFF;\n    color += (`00${value.toString(16)}`).substr(-2);\n  }\n  return color;\n};\n\nconst Picker = ({ pickerInstance, values, colorNameUtil, setEaselColor }) => {\n  const [temp, setTemp] = useState('');\n  const [colorName, setColorName] = useState('Red');\n  const [comp, setComp] = useState(complementary(values.hex));\n  // TODO: Allow ability to toggle what is displayed\n  // const [showOptions, setShowOptions] = useState({\n  //   name: true,\n  //   hex: true,\n  //   rgb: true,\n  //   hsl: true\n  // });\n\n  // Ref for event handling in useEffect\n  const colorPicker = useRef();\n\n  // Update the color name when necessary\n  const updateColorName = useCallback(() => {\n    let color = colorNameUtil.getColor(values.hex);\n    // Use the nearest color name if not defined\n    color = color === undefined ? colorNameUtil.getNearestColor(values.hex).name : color.name;\n    setColorName(color);\n  }, [colorNameUtil, values]);\n\n  // Update Hex, RGB, and HSL in component as well as the widget\n  const updateRgb = useCallback((tempRgb) => {\n    pickerInstance.color.set(tempRgb);\n    setEaselColor(values.hex);\n  }, [pickerInstance.color, values.hex, values.hsl, setEaselColor]);\n\n  const updateHsl = useCallback((tempHsl) => {\n    pickerInstance.color.set(tempHsl);\n    setEaselColor(values.hex);\n  }, [pickerInstance.color, values.hex, values.rgb, setEaselColor]);\n\n  const updateHex = useCallback((tempHex) => {\n    // Do not update other values unless hex is valid\n    if (!isInvalidHexInput(tempHex)) {\n      pickerInstance.color.set(tempHex);\n      setEaselColor(tempHex);\n    }\n  }, [pickerInstance.color, values.rgb, values.hsl, setEaselColor]);\n\n  // On key down, handle backspace and delete properly\n  const handleKeyDown = useCallback((e) => {\n    const index = e.target.selectionStart;\n    if (e.target.value.length === 1\n      && ((e.key === 'Backspace' && index === 1)\n      || (e.key === 'Delete' && index === 0))) {\n      e.target.value = '';\n    }\n  }, []);\n\n  // On input key press, perform validation for on change event\n  const handleKeyPress = useCallback((max) => (e) => {\n    const { value } = e.target;\n    // If selected and valid key\n    if (hasSelection(e.target) && /[0-9]/.test(e.key)) {\n      return;\n    }\n    // Validate the key entered; otherwise prevent input\n    if (!/[0-9]/.test(e.key) || e.key === 'Enter') {\n      e.preventDefault();\n      return;\n    }\n    // If input has characters\n    if (value !== '') {\n      // Generate the temp value based on where selection started\n      const digits = [...value];\n      const index = e.target.selectionStart;\n      digits.splice(index, 0, e.key);\n      const tempValue = digits.join('');\n      // If the temp value is invalid, prevent input\n      if (isInvalidInput(tempValue)\n          || (value.length === 2 && outOfBounds(tempValue, max))) {\n        e.preventDefault();\n        return;\n      }\n      // Valid temp value; set the temp\n      setTemp(tempValue);\n    }\n  }, []);\n\n  const handleNamePress = useCallback((e) => {\n    // Value before e.key is added\n    const { value } = e.target;\n    // If there is a selection allow input\n    if (hasSelection(e.target)) {\n      // If replacing entire input, make sure key is upper case\n      if (window.getSelection().toString() === value) {\n        e.key = e.key.toUpperCase();\n        setTemp(e.key);\n      }\n      return;\n    }\n    // Only allow these characters for naming conventions\n    if (!/[a-zA-Z0-9!@#$%^&*)(+=._-\\s]/.test(e.key) || e.key === 'Enter') {\n      e.preventDefault();\n      return;\n    }\n    // If input has characters\n    if (value !== '') {\n      // Generate the temp value based on where selection started\n      const chars = [...value];\n      const index = e.target.selectionStart;\n      chars.splice(index, 0, e.key);\n      const tempValue = chars.join('');\n      setTemp(tempValue);\n    } else {\n      // Handle backspace to capitalize first char\n      const index = e.target.selectionStart;\n      // first char, make it upper case\n      if (index === 0 && /[a-z]/.test(e.key)) {\n        e.key = e.key.toUpperCase();\n      }\n      setTemp(e.key);\n    }\n  }, []);\n\n  const handleHexKeyPress = useCallback((e) => {\n    const { value } = e.target;\n    const index = e.target.selectionStart;\n    // If selected and valid key\n    if (hasSelection(e.target) && /[#a-fA-F0-9]/.test(e.key)) {\n      if (e.key === '#' && index !== 0) {\n        e.preventDefault();\n      }\n      return;\n    }\n    // If input has characters\n    if (value !== '') {\n      // Validate the key entered; otherwise prevent input\n      if (!/[#a-fA-F0-9]/.test(e.key) || e.key === 'Enter') {\n        e.preventDefault();\n        return;\n      }\n      // Generate the temp value based on where selection started\n      const hexValues = [...value];\n      // Validate that # starts on the 0th index\n      if (e.key === '#' && index !== 0) {\n        e.preventDefault();\n        return;\n      }\n      hexValues.splice(index, 0, e.key);\n      const tempValue = hexValues.join('');\n      // If the temp value is invalid, prevent input\n      if (isInvalidHexInput(tempValue) && !isPartialHexInput(tempValue)) {\n        e.preventDefault();\n        return;\n      }\n      // Valid temp value; set the temp\n      setTemp(tempValue);\n    } else if (e.key !== '#') {\n      e.preventDefault();\n    }\n  }, []);\n\n  // On paste, validate that the text data is within bounds for RGB and HSL\n  const handlePaste = useCallback((max) => (e) => {\n    const textData = e.clipboardData.getData('text');\n    // Text data must be a number\n    if (Number.isNaN(parseInt(textData, 10))) {\n      e.preventDefault();\n      return;\n    }\n    const { value } = e.target;\n    const index = e.target.selectionStart;\n    const count = e.target.selectionEnd - index;\n    const digits = [...value];\n    digits.splice(index, count, textData);\n    const tempValue = digits.join('');\n    // Prevent if out of bounds\n    if (outOfBounds(tempValue, max)) {\n      e.preventDefault();\n      return;\n    }\n    setTemp(tempValue);\n  }, []);\n\n  // On paste, validate that the resulting input is a valid or partial Hex\n  const handleHexPaste = useCallback((e) => {\n    const textData = e.clipboardData.getData('text');\n    // Prevent other characters\n    if (!/[#a-fA-F0-9]+/.test(textData)) {\n      e.preventDefault();\n      return;\n    }\n    const { value } = e.target;\n    const index = e.target.selectionStart;\n    const count = e.target.selectionEnd - index;\n    const chars = [...value];\n    chars.splice(index, count, textData);\n    const tempValue = chars.join('');\n    // Prevent if invalid and not a partial\n    if (isInvalidHexInput(tempValue) && !isPartialHexInput(tempValue)) {\n      e.preventDefault();\n      return;\n    }\n    setTemp(tempValue);\n  }, []);\n\n  // On out of focus and value is empty string, set to default value of 0\n  const handleRgbBlur = useCallback((prop) => (e) => {\n    if (e.target.value === '') {\n      e.target.value = '0';\n      const tempRgb = clone(values.rgb);\n      tempRgb[prop] = e.target.value;\n      updateRgb(tempRgb);\n      updateColorName();\n    }\n  }, [values.rgb, updateRgb, updateColorName]);\n\n  const handleHslBlur = useCallback((prop) => (e) => {\n    if (e.target.value === '') {\n      e.target.value = '0';\n      const tempHsl = clone(values.hsl);\n      tempHsl[prop] = e.target.value;\n      updateHsl(tempHsl);\n      updateColorName();\n    }\n  }, [values.hsl, updateHsl, updateColorName]);\n\n  // On out of focus of color name, update to the actual color name\n  const handleNameBlur = useCallback(() => {\n    updateColorName();\n  }, [updateColorName]);\n\n  // On change, update Hex, RGB, and HSL values\n  const handleRgbChange = useCallback((prop) => (e) => {\n    if (temp !== '') {\n      e.target.value = temp;\n      setTemp('');\n    }\n    const { value } = e.target;\n    const tempRgb = clone(values.rgb);\n    tempRgb[prop] = value;\n    if (value !== '') {\n      updateRgb(tempRgb);\n      updateColorName();\n    }\n  }, [temp, values.rgb, updateRgb, updateColorName]);\n\n  const handleHslChange = useCallback((prop) => (e) => {\n    if (temp !== '') {\n      e.target.value = temp;\n      setTemp('');\n    }\n    const { value } = e.target;\n    const tempHsl = clone(values.hsl);\n    tempHsl[prop] = value;\n    if (value !== '') {\n      updateHsl(tempHsl);\n      updateColorName();\n    }\n  }, [temp, values.hsl, updateHsl, updateColorName]);\n\n  const handleHexChange = useCallback((e) => {\n    if (temp !== '') {\n      e.target.value = temp;\n      setTemp('');\n    }\n    const value = e.target.value === '' ? '#000' : e.target.value;\n    updateHex(value);\n    updateColorName();\n  }, [temp, updateHex, updateColorName]);\n\n  const handleNameChange = useCallback((e) => {\n    const index = e.target.selectionStart;\n    if (temp !== '') {\n      e.target.value = temp;\n      setTemp('');\n    }\n    const value = e.target.value === '' ? 'Black' : e.target.value;\n    const color = colorNameUtil.getHex(value);\n    const hexFromName = color === undefined ? stringToColor(value) : color.hex;\n    updateHex(hexFromName);\n    // Set, but do not update internal values\n    setColorName(value);\n    // Maintain the selection index\n    e.target.selectionStart = index;\n    e.target.selectionEnd = index;\n  }, [temp, updateHex, colorNameUtil]);\n\n  useEffect(() => {\n    // Define update values\n    const updateValues = () => {\n      setComp(complementary(values.hex));\n      updateColorName();\n      setEaselColor(values.hex);\n    };\n    // Define mouse events\n    let isColorChanging = false;\n    const handleMouseDown = (e) => {\n      if (colorPicker.current.contains(e.target)) {\n        updateValues();\n        isColorChanging = true;\n      }\n    };\n    const handleMouseMove = () => {\n      if (isColorChanging) {\n        updateValues();\n      }\n    };\n    const handleMouseUp = () => {\n      if (isColorChanging) {\n        isColorChanging = false;\n      }\n    };\n    // Add the event listeners\n    document.addEventListener('mousedown', handleMouseDown);\n    document.addEventListener('mousemove', handleMouseMove);\n    document.addEventListener('mouseup', handleMouseUp);\n    return () => {\n      document.removeEventListener('mousedown', handleMouseDown);\n      document.removeEventListener('mousemove', handleMouseMove);\n      document.removeEventListener('mouseup', handleMouseUp);\n    };\n  }, [updateColorName, values, setEaselColor]);\n\n  return (\n    <div className=\"picker\">\n      <div className=\"colorPicker\" ref={colorPicker} />\n      <div className=\"colorValues\">\n        <div className=\"color-container\">\n          <div className=\"info-container\" style={{ backgroundColor: '#fff' }}>\n            <div className=\"name-container\">\n              <div className=\"name-label\">\n                name:&nbsp;\n                <input\n                  id=\"name-input\"\n                  type=\"text\"\n                  value={colorName}\n                  maxLength=\"40\"\n                  onKeyDown={handleKeyDown}\n                  onKeyPress={handleNamePress}\n                  onBlur={handleNameBlur}\n                  onChange={handleNameChange}\n                />\n                <button\n                  type=\"button\"\n                  className=\"clip-name\"\n                  data-clipboard-target=\"#name-input\"\n                >\n                  <img width=\"14\" src={clippy} alt=\"Copy\" />\n                </button>\n              </div>\n            </div>\n            <div className=\"hex-container\">\n              <div className=\"hex-label\">\n                hex:&nbsp;\n                <input\n                  id=\"hex-input\"\n                  type=\"text\"\n                  value={values.hex}\n                  maxLength=\"7\"\n                  onKeyDown={handleKeyDown}\n                  onKeyPress={handleHexKeyPress}\n                  onPaste={handleHexPaste}\n                  onChange={handleHexChange}\n                />\n                <button\n                  type=\"button\"\n                  className=\"clip-hex\"\n                  data-clipboard-target=\"#hex-input\"\n                >\n                  <img width=\"14\" src={clippy} alt=\"Copy\" />\n                </button>\n              </div>\n            </div>\n            <div className=\"rgb-container\">\n              <span>{`rgb(${values.rgb.r}, ${values.rgb.g}, ${values.rgb.b})`}</span>\n              <div>\n                r:&nbsp;\n                <input\n                  type=\"text\"\n                  value={values.rgb.r}\n                  maxLength=\"3\"\n                  onKeyDown={handleKeyDown}\n                  onKeyPress={handleKeyPress(255)}\n                  onPaste={handlePaste(255)}\n                  onBlur={handleRgbBlur('r')}\n                  onChange={handleRgbChange('r')}\n                />\n              </div>\n              <div>\n                g:&nbsp;\n                <input\n                  type=\"text\"\n                  value={values.rgb.g}\n                  maxLength=\"3\"\n                  onKeyDown={handleKeyDown}\n                  onKeyPress={handleKeyPress(255)}\n                  onPaste={handlePaste(255)}\n                  onBlur={handleRgbBlur('g')}\n                  onChange={handleRgbChange('g')}\n                />\n              </div>\n              <div>\n                b:&nbsp;\n                <input\n                  type=\"text\"\n                  value={values.rgb.b}\n                  maxLength=\"3\"\n                  onKeyDown={handleKeyDown}\n                  onKeyPress={handleKeyPress(255)}\n                  onPaste={handlePaste(255)}\n                  onBlur={handleRgbBlur('b')}\n                  onChange={handleRgbChange('b')}\n                />\n              </div>\n            </div>\n            <div className=\"hsl-container\">\n              <span>{`hsl(${values.hsl.h}, ${values.hsl.s}%, ${values.hsl.l}%)`}</span>\n              <div>\n                h:&nbsp;\n                <input\n                  type=\"text\"\n                  value={values.hsl.h}\n                  maxLength=\"3\"\n                  onKeyDown={handleKeyDown}\n                  onKeyPress={handleKeyPress(360)}\n                  onPaste={handlePaste(360)}\n                  onBlur={handleHslBlur('h')}\n                  onChange={handleHslChange('h')}\n                />\n              </div>\n              <div>\n                s:&nbsp;\n                <input\n                  type=\"text\"\n                  value={values.hsl.s}\n                  maxLength=\"3\"\n                  onKeyDown={handleKeyDown}\n                  onKeyPress={handleKeyPress(100)}\n                  onPaste={handlePaste(100)}\n                  onBlur={handleHslBlur('s')}\n                  onChange={handleHslChange('s')}\n                />\n              </div>\n              <div>\n                l:&nbsp;\n                <input\n                  type=\"text\"\n                  value={values.hsl.l}\n                  maxLength=\"3\"\n                  onKeyDown={handleKeyDown}\n                  onKeyPress={handleKeyPress(100)}\n                  onPaste={handlePaste(100)}\n                  onBlur={handleHslBlur('l')}\n                  onChange={handleHslChange('l')}\n                />\n              </div>\n            </div>\n          </div>\n          <div className=\"preview\">\n            <div className=\"current-color\" style={{ backgroundColor: values.hex }}>\n              <span>{values.hex}</span>\n            </div>\n            <div className=\"comp-color\" style={{ backgroundColor: comp }}>\n              <span>{comp}</span>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Picker;\n","import React, { useState, useCallback } from 'react';\nimport './Swatch.css';\n\nconst Swatch = ({ colorId, color, removeColor, changeColor }) => {\n  const [currentColor, setCurrentColor] = useState(color);\n\n  const changeColorToCurrent = useCallback(() => {\n    changeColor(color, currentColor);\n  }, [color, currentColor, changeColor]);\n\n  // On blur update the array of colors in the parent scheme\n  const handleBlur = useCallback((e) => {\n    changeColor(color, e.target.value);\n  }, [color, changeColor]);\n\n  // On change set the local current color\n  const handleChange = useCallback((e) => {\n    changeColorToCurrent();\n    setCurrentColor(e.target.value);\n  }, [changeColorToCurrent]);\n\n  const handleRemove = useCallback(() => {\n    changeColorToCurrent();\n    removeColor(currentColor);\n  }, [changeColorToCurrent, currentColor]);\n\n  return (\n    <div className=\"swatch\" style={{ backgroundColor: currentColor }}>\n      <button\n        type=\"button\"\n        onClick={() => handleRemove()}\n      >\n        Remove\n      </button>\n      <input\n        type=\"text\"\n        value={currentColor}\n        maxLength=\"7\"\n        onBlur={handleBlur}\n        onChange={handleChange}\n      />\n    </div>\n  );\n};\n\nexport default Swatch;\n","import React, { useState, useCallback } from 'react';\nimport Swatch from './Swatch';\nimport './Scheme.css';\n\nconst maxColors = 8;\n\nconst Scheme = ({ schemeId, remove, easelColor }) => {\n  const [colors, setColors] = useState([]);\n  const [name, setName] = useState(schemeId.split('-').join(' '));\n\n  const addColor = useCallback(() => {\n    if (colors.length >= maxColors || colors.includes(easelColor)) {\n      return;\n    }\n    setColors([...colors, easelColor]);\n  }, [colors, easelColor]);\n\n  const removeColor = useCallback((color) => {\n    setColors(colors.filter((otherColor) => otherColor !== color));\n  }, [colors]);\n\n  const changeColor = useCallback((color, replacement) => {\n    setColors(colors.map((otherColor) => (otherColor !== color ? otherColor : replacement)));\n  }, [colors]);\n\n  const rename = useCallback((e) => {\n    setName(e.target.value);\n  }, []);\n\n  return (\n    <div className=\"scheme\">\n      <div className=\"scheme-name\">\n        <input value={name} onChange={rename} />\n      </div>\n      <div className=\"scheme-buttons\">\n        <button type=\"button\" onClick={() => addColor()}>Add Current Color</button>\n        <button type=\"button\" onClick={() => remove(schemeId)}>Delete Scheme</button>\n      </div>\n      <div className=\"swatch-container\">\n        {colors.map((color, colorId) => (\n          <Swatch\n            key={`Color-${color}`}\n            colorId={colorId}\n            color={color}\n            removeColor={removeColor}\n            changeColor={changeColor}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default Scheme;\n","import React, { useState } from 'react';\nimport Clipboard from 'clipboard';\nimport PickerCreator from '../api/PickerCreator';\nimport ColorNameUtil from '../api/ColorNameUtil';\nimport Picker from './Picker';\nimport Scheme from './Scheme';\nimport './Easel.css';\n\nconst defaultPickerName = 'colorPicker';\n\n// Initialize copy to clipboard buttons for Pickers\nnew Clipboard('.clip-name');\nnew Clipboard('.clip-hex');\n\nconst colorNameUtil = new ColorNameUtil();\n\nconst pickerCreator = new PickerCreator(defaultPickerName);\nconst [pickerInstance, values] = pickerCreator.generate();\n\nconst schemeName = 'Scheme-';\nlet schemeId = 1;\n\nconst Easel = () => {\n  const [schemes, setSchemes] = useState([]);\n  const [easelColor, setEaselColor] = useState(values.hex);\n\n  const addScheme = () => {\n    setSchemes([...schemes, schemeName + schemeId++]);\n  };\n\n  const removeScheme = (scheme) => {\n    setSchemes(schemes.filter((otherScheme) => otherScheme !== scheme));\n  };\n\n  return (\n    <div className=\"easel\">\n      <Picker\n        key={defaultPickerName}\n        pickerInstance={pickerInstance}\n        values={values}\n        colorNameUtil={colorNameUtil}\n        setEaselColor={setEaselColor}\n      />\n      <div className=\"scheme-container\">\n        <button type=\"button\" onClick={() => addScheme()}>New Scheme</button>\n        {schemes.map((scheme) => (\n          <Scheme\n            key={scheme}\n            schemeId={scheme}\n            remove={removeScheme}\n            easelColor={easelColor}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default Easel;\n","import namedColors from 'color-name-list';\nimport nearestColor from 'nearest-color';\n\nexport default class ColorNameUtil {\n  constructor() {\n    this.namedColors = namedColors;\n    this.nearestColors = nearestColor.from(namedColors.reduce(\n      (o, { name, hex }) => Object.assign(o, { [name]: hex }), {},\n    ));\n  }\n\n  getAllColors() {\n    return this.namedColors;\n  }\n\n  // Get the exact matching color using a hex color code with '#' prepended\n  getColor(hex) {\n    return this.namedColors.find((color) => color.hex === hex);\n  }\n\n  // Get the exact hex from a color's name\n  getHex(colorName) {\n    return this.namedColors.find((color) => color.name === colorName);\n  }\n\n  // Get the nearest color using a hex color code with '#' prepended\n  getNearestColor(hex) {\n    return this.nearestColors(hex);\n  }\n}\n","import iro from '@jaames/iro';\n\nexport default class PickerCreator {\n  constructor(pickerName) {\n    this.pickerName = pickerName;\n  }\n\n  generate() {\n    // Create a new color picker instance\n    // https://iro.js.org/guide.html#getting-started\n    const settings = {\n      // color picker options\n      // Option guide: https://iro.js.org/guide.html#color-picker-options\n      color: 'rgb(255, 0, 0)',\n      borderWidth: 1,\n      borderColor: '#fff',\n    };\n\n    const pickerInstance = new iro.ColorPicker(`.${this.pickerName}`, settings);\n\n    const values = {};\n    // https://iro.js.org/guide.html#color-picker-events\n    pickerInstance.on(['color:init', 'color:change'], (color) => {\n      // Show the current color in different formats\n      // Using the selected color: https://iro.js.org/guide.html#selected-color-api\n      values.hex = color.hexString;\n      values.rgb = color.rgb;\n      values.hsl = color.hsl;\n    });\n    return [pickerInstance, values];\n  }\n}\n","import React from 'react';\nimport Easel from './components/Easel';\n\nconst App = () => (\n  <div className=\"App\">\n    <Easel />\n  </div>\n);\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}