{"version":3,"sources":["assets/clippy.svg","components/Picker.js","components/Swatch.js","components/Scheme.js","components/Easel.js","api/ColorNameUtil.js","api/PickerCreator.js","App.js","index.js"],"names":["clone","rdfc","outOfBounds","value","max","parseInt","isInvalidHexInput","RegExp","test","isPartialHexInput","hasSelection","document","getSelection","toString","selection","createRange","length","Picker","pickerInstance","values","colorNameUtil","setEaselColor","useState","temp","setTemp","colorName","setColorName","hex","setHex","rgb","setRgb","hsl","setHsl","colorPicker","useRef","updateColorName","useCallback","longHex","hexVal","index","startsWith","slice","ch","convertShortHexToLongHex","color","getColor","undefined","getNearestColor","name","updateRgb","tempRgb","set","updateHsl","tempHsl","updateHex","tempHex","handleKeyDown","e","target","selectionStart","key","handleKeyPress","digits","splice","tempValue","join","isInvalidInput","preventDefault","handleNamePress","toUpperCase","chars","console","log","handleHexKeyPress","hexValues","handlePaste","textData","clipboardData","getData","Number","isNaN","count","selectionEnd","handleHexPaste","handleRgbBlur","prop","handleHslBlur","handleNameBlur","handleRgbChange","handleHslChange","handleHexChange","handleNameChange","getHex","hexFromName","str","hash","i","charCodeAt","substr","stringToColor","useEffect","updateValues","isColorChanging","handleMouseDown","current","contains","handleMouseMove","handleMouseUp","addEventListener","removeEventListener","className","ref","style","backgroundColor","id","type","maxLength","onKeyDown","onKeyPress","onBlur","onChange","data-clipboard-target","width","src","clippy","alt","onPaste","r","g","b","h","s","l","Swatch","colorId","removeColor","changeColor","currentColor","setCurrentColor","changeColorToCurrent","handleBlur","handleChange","onClick","Scheme","schemeId","remove","easelColor","colors","setColors","split","setName","addColor","includes","filter","otherColor","replacement","map","rename","defaultPickerName","Clipboard","constructor","this","namedColors","nearestColors","nearestColor","from","reduce","o","Object","assign","getAllColors","find","pickerName","generate","iro","ColorPicker","borderWidth","borderColor","on","hexString","Easel","schemes","setSchemes","removeScheme","scheme","otherScheme","App","Component","render","ReactDOM","getElementById"],"mappings":"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","file":"static/js/main.602bd9d1.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/clippy.89bd48cb.svg\";","import React, {useState, useEffect, useCallback, useRef} from 'react';\nimport rdfc from 'rfdc';\nimport clippy from '../assets/clippy.svg';\nimport './Picker.css';\n\nconst clone = rdfc();\n\n// Check if value exceeds max\nconst outOfBounds = (value, max) => {\n  return parseInt(value, 10) > max;\n};\n\n// Check for invalid HSL and RGB input\nconst isInvalidInput = value => {\n  const hslRgbPattern = RegExp('^[0-9]{1,3}$');\n  return !hslRgbPattern.test(value) ||\n  (value.startsWith('0') && value.length > 1);\n};\n\n// Check for invalid Hex input\nconst isInvalidHexInput = value => {\n  const hexPattern = RegExp('^#?([a-fA-F0-9]{6}|[a-fA-F0-9]{3})$');\n  return !hexPattern.test(value);\n};\n\n// Check for partial hex input\nconst isPartialHexInput = value => {\n  const partialHexPattern = RegExp(`^#([a-fA-F0-9]{0,2}|[a-fA-F0-9]{4,5})$|\n  ^([a-fA-F0-9]{1,2}|[a-fA-F0-9]{4,5})$`);\n  return partialHexPattern.test(value);\n};\n\n// Convert short hex to long hex when using color names\nconst convertShortHexToLongHex = hexVal => {\n  let longHex = \"#\";\n  const index = hexVal.startsWith('#') ? 1 : 0;\n  if (hexVal.length - index === 6) {\n    return hexVal;\n  }\n  for (let ch of hexVal.slice(index)) {\n    longHex += ch + ch;\n  }\n  return longHex;\n};\n\n// Determine if document has a selection\nconst hasSelection = () => {\n  const selection = document.getSelection() ?\n                      document.getSelection().toString() :\n                      document.selection.createRange().toString();\n  return selection.length > 0;\n};\n\n// Convert any string to a valid hex color\nconst stringToColor = str => {\n  let hash = 0;\n  for (let i = 0; i < str.length; i++) {\n    hash = str.charCodeAt(i) + ((hash << 5) - hash);\n  }\n  let color = '#';\n  for (let i = 0; i < 3; i++) {\n    let value = (hash >> (i * 8)) & 0xFF;\n    color += ('00' + value.toString(16)).substr(-2);\n  }\n  return color;\n};\n\nconst Picker = ({pickerInstance, values, colorNameUtil, setEaselColor}) => {\n  const [temp, setTemp] = useState('');\n  const [colorName, setColorName] = useState('Red');\n  const [hex, setHex] = useState(values.hex);\n  const [rgb, setRgb] = useState(values.rgb);\n  const [hsl, setHsl] = useState(values.hsl);\n  // TODO: Allow ability to toggle what is displayed\n  // const [showOptions, setShowOptions] = useState({\n  //   name: true,\n  //   hex: true,\n  //   rgb: true,\n  //   hsl: true\n  // });\n\n  // Ref for event handling in useEffect\n  const colorPicker = useRef();\n\n  // Update the color name when necessary\n  const updateColorName = useCallback(() => {\n    const longHex = convertShortHexToLongHex(values.hex);\n    let color = colorNameUtil.getColor(longHex);\n    // Use the nearest color name if not defined\n    color = color === undefined ? colorNameUtil.getNearestColor(longHex).name : color.name;\n    setColorName(color);\n  }, [colorNameUtil, values]);\n\n  // Update Hex, RGB, and HSL in component as well as the widget\n  const updateRgb = useCallback(tempRgb => {\n    setRgb(tempRgb);\n    pickerInstance.color.set(tempRgb);\n    setHex(values.hex);\n    setHsl(values.hsl);\n    setEaselColor(values.hex);\n  }, [pickerInstance.color, values.hex, values.hsl, setEaselColor]);\n\n  const updateHsl = useCallback(tempHsl => {\n    setHsl(tempHsl);\n    pickerInstance.color.set(tempHsl);\n    setHex(values.hex);\n    setRgb(values.rgb);\n    setEaselColor(values.hex);\n  }, [pickerInstance.color, values.hex, values.rgb, setEaselColor]);\n\n  const updateHex = useCallback(tempHex => {\n    setHex(tempHex);\n    // Do not update other values unless hex is valid\n    if (!isInvalidHexInput(tempHex)) {\n      pickerInstance.color.set(tempHex);\n      setRgb(values.rgb);\n      setHsl(values.hsl);\n      setEaselColor(tempHex);\n    }\n  }, [pickerInstance.color, values.rgb, values.hsl, setEaselColor]);\n\n  // On key down, handle backspace and delete properly\n  const handleKeyDown = useCallback(e => {\n    const index = e.target.selectionStart;\n    if (e.target.value.length === 1 &&\n      ((e.key === 'Backspace' && index === 1) ||\n      (e.key === 'Delete' && index === 0))) {\n      e.target.value = '';\n    }\n  }, []);\n\n  // On input key press, perform validation for on change event\n  const handleKeyPress = useCallback(max => e => {\n    let value = e.target.value;\n    // If selected and valid key\n    if (hasSelection() && /[0-9]/.test(e.key)) {\n      return;\n    }\n    // Validate the key entered; otherwise prevent input\n    if (!/[0-9]/.test(e.key) || e.key === 'Enter') {\n      e.preventDefault();\n      return;\n    }\n    // If input has characters\n    if (value !== '') {\n      // Generate the temp value based on where selection started\n      let digits = [...value];\n      const index = e.target.selectionStart;\n      digits.splice(index, 0, e.key);\n      let tempValue = digits.join('');\n      // If the temp value is invalid, prevent input\n      if (isInvalidInput(tempValue) ||\n          (value.length === 2 && outOfBounds(tempValue, max))) {\n        e.preventDefault();\n        return;\n      }\n      // Valid temp value; set the temp\n      setTemp(tempValue);\n    }\n  }, []);\n\n  const handleNamePress = useCallback(e => {\n    // Value before e.key is added\n    let value = e.target.value;\n    // If there is a selection allow input\n    if (hasSelection()) {\n      // If replacing entire input, make sure key is upper case\n      if (document.getSelection().toString() === value) {\n        e.key = e.key.toUpperCase();\n        setTemp(e.key);\n      }\n      return;\n    }\n    // Only allow these characters for naming conventions\n    if (!/[a-zA-Z0-9!@#$%^&*)(+=._-\\s]/.test(e.key) || e.key === 'Enter') {\n      e.preventDefault();\n      return;\n    }\n    // If input has characters\n    if (value !== '') {\n      // Generate the temp value based on where selection started\n      let chars = [...value];\n      const index = e.target.selectionStart;\n      chars.splice(index, 0, e.key);\n      let tempValue = chars.join('');\n      console.log(tempValue);\n      setTemp(tempValue);\n    }\n    // Handle backspace to capitalize first char\n    else {\n      const index = e.target.selectionStart;\n      // first char, make it upper case\n      if (index === 0 && /[a-z]/.test(e.key)) {\n        e.key = e.key.toUpperCase();\n      }\n      setTemp(e.key);\n    }\n  }, []);\n\n  const handleHexKeyPress = useCallback(e => {\n    let value = e.target.value;\n    const index = e.target.selectionStart;\n    // If selected and valid key\n    if (hasSelection() && /[#a-fA-F0-9]/.test(e.key)) {\n      if (e.key === '#' && index !== 0) {\n        e.preventDefault();\n      }\n      return;\n    }\n    // If input has characters\n    if (value !== '') {\n      // Validate the key entered; otherwise prevent input\n      if (!/[#a-fA-F0-9]/.test(e.key) || e.key === 'Enter') {\n        e.preventDefault();\n        return;\n      }\n      // Generate the temp value based on where selection started\n      let hexValues = [...value];\n      // Validate that # starts on the 0th index\n      if (e.key === '#' && index !== 0) {\n        e.preventDefault();\n        return;\n      }\n      hexValues.splice(index, 0, e.key);\n      let tempValue = hexValues.join('');\n      // If the temp value is invalid, prevent input\n      if (isInvalidHexInput(tempValue) && !isPartialHexInput(tempValue)) {\n        e.preventDefault();\n        return;\n      }\n      // Valid temp value; set the temp\n      setTemp(tempValue);\n    }\n    else if (e.key !== '#') {\n      e.preventDefault();\n    }\n  }, []);\n\n  // On paste, validate that the text data is within bounds for RGB and HSL\n  const handlePaste = useCallback(max => e => {\n    const textData = e.clipboardData.getData('text');\n    // Text data must be a number\n    if (Number.isNaN(parseInt(textData, 10))) {\n      e.preventDefault();\n      return;\n    }\n    let value = e.target.value;\n    const index = e.target.selectionStart;\n    const count = e.target.selectionEnd - index;\n    let digits = [...value];\n    digits.splice(index, count, textData);\n    let tempValue = digits.join('');\n    // Prevent if out of bounds\n    if (outOfBounds(tempValue, max)) {\n      e.preventDefault();\n      return;\n    }\n    setTemp(tempValue);\n  }, []);\n\n  // On paste, validate that the resulting input is a valid or partial Hex\n  const handleHexPaste = useCallback(e => {\n    const textData = e.clipboardData.getData('text');\n    // Prevent other characters\n    if (!/[#a-fA-F0-9]+/.test(textData)) {\n      e.preventDefault();\n      return;\n    }\n    let value = e.target.value;\n    const index = e.target.selectionStart;\n    const count = e.target.selectionEnd - index;\n    let chars = [...value];\n    chars.splice(index, count, textData);\n    let tempValue = chars.join('');\n    // Prevent if invalid and not a partial\n    if (isInvalidHexInput(tempValue) && !isPartialHexInput(tempValue)) {\n      e.preventDefault();\n      return;\n    }\n    setTemp(tempValue);\n  }, [])\n\n  // On out of focus and value is empty string, set to default value of 0\n  const handleRgbBlur = useCallback(prop => e => {\n    if (e.target.value === '') {\n      e.target.value = '0';\n      let tempRgb = clone(values.rgb);\n      tempRgb[prop] = e.target.value;\n      updateRgb(tempRgb);\n      updateColorName();\n    }\n  }, [values.rgb, updateRgb, updateColorName]);\n\n  const handleHslBlur = useCallback(prop => e => {\n    if (e.target.value === '') {\n      e.target.value = '0';\n      let tempHsl = clone(values.hsl);\n      tempHsl[prop] = e.target.value;\n      updateHsl(tempHsl);\n      updateColorName();\n    }\n  }, [values.hsl, updateHsl, updateColorName]);\n\n  // On out of focus of color name, update to the actual color name\n  const handleNameBlur = useCallback(() => {\n    updateColorName();\n  }, [updateColorName])\n\n  // On change, update Hex, RGB, and HSL values\n  const handleRgbChange = useCallback(prop => e => {\n    if (temp !== '') {\n      e.target.value = temp;\n      setTemp('');\n    }\n    let value = e.target.value;\n    let tempRgb = clone(values.rgb);\n    tempRgb[prop] = value;\n    if (value !== '') {\n      updateRgb(tempRgb);\n      updateColorName();\n    } else {\n      setRgb(tempRgb);\n    }\n  }, [temp, values.rgb, updateRgb, updateColorName]);\n\n  const handleHslChange = useCallback(prop => e => {\n    if (temp !== '') {\n      e.target.value = temp;\n      setTemp('');\n    }\n    let value = e.target.value;\n    let tempHsl = clone(values.hsl);\n    tempHsl[prop] = value;\n    if (value !== '') {\n      updateHsl(tempHsl);\n      updateColorName();\n    } else {\n      setHsl(tempHsl);\n    }\n  }, [temp, values.hsl, updateHsl, updateColorName]);\n\n  const handleHexChange = useCallback(e => {\n    if (temp !== '') {\n      e.target.value = temp;\n      setTemp('');\n    }\n    let value = e.target.value === '' ? '#000' : e.target.value;\n    updateHex(value);\n    updateColorName();\n  }, [temp, updateHex, updateColorName]);\n\n  const handleNameChange = useCallback(e => {\n    const index = e.target.selectionStart;\n    if (temp !== '') {\n      e.target.value = temp;\n      setTemp('');\n    }\n    let value = e.target.value === '' ? 'Black' : e.target.value;\n    const color = colorNameUtil.getHex(value);\n    let hexFromName = color === undefined ? stringToColor(value) : color.hex;\n    updateHex(hexFromName);\n    // Set, but do not update internal values\n    setColorName(value);\n    // Maintain the selection index\n    e.target.selectionStart = index;\n    e.target.selectionEnd = index;\n  }, [temp, updateHex, colorNameUtil]);\n\n  useEffect(() => {\n    // Define update values\n    const updateValues = () => {\n      setHex(values.hex);\n      setRgb(values.rgb);\n      setHsl(values.hsl);\n      updateColorName();\n      setEaselColor(values.hex);\n    };\n    // Define mouse events\n    let isColorChanging = false;\n    const handleMouseDown = e => {\n      if (colorPicker.current.contains(e.target)) {\n        updateValues();\n        isColorChanging = true;\n      }\n    };\n    const handleMouseMove = () => {\n      if (isColorChanging) {\n        updateValues();\n      }\n    };\n    const handleMouseUp = () => {\n      if (isColorChanging) {\n        isColorChanging = false;\n      }\n    };\n    // Add the event listeners\n    document.addEventListener('mousedown', handleMouseDown);\n    document.addEventListener('mousemove', handleMouseMove);\n    document.addEventListener('mouseup', handleMouseUp);\n    return () => {\n      document.removeEventListener('mousedown', handleMouseDown);\n      document.removeEventListener('mousemove', handleMouseMove);\n      document.removeEventListener('mouseup', handleMouseUp);\n    }\n  }, [updateColorName, values, setEaselColor]);\n\n  return (\n    <div className=\"picker\">\n      <div className=\"colorPicker\" ref={colorPicker}/>\n      <div className=\"colorValues\">\n        <div className=\"color-container\" style={{backgroundColor: values.hex}}>\n          <div className=\"name-container\">\n            <div id=\"name-label\">\n              name:&nbsp;\n              <input id=\"name-input\" type=\"text\" value={colorName} maxLength=\"40\"\n                onKeyDown={handleKeyDown}\n                onKeyPress={handleNamePress}\n                onBlur={handleNameBlur}\n                onChange={handleNameChange}\n              />\n              <button className=\"clip-name\"\n                data-clipboard-target=\"#name-input\"\n              >\n                <img width=\"14\" src={clippy} alt=\"Copy\" />\n              </button>\n            </div>\n          </div>\n          <div className=\"hex-container\">\n            <div id=\"hex-label\">\n              hex:&nbsp;\n              <input id=\"hex-input\" type=\"text\" value={hex} maxLength=\"7\"\n                onKeyDown={handleKeyDown}\n                onKeyPress={handleHexKeyPress}\n                onPaste={handleHexPaste}\n                onChange={handleHexChange}\n              />\n              <button className=\"clip-hex\"\n                data-clipboard-target=\"#hex-input\"\n              >\n                <img width=\"14\" src={clippy} alt=\"Copy\" />\n              </button>\n            </div>\n          </div>\n          <div className=\"rgb-container\">\n            <span>{`rgb(${rgb.r}, ${rgb.g}, ${rgb.b})`}</span>\n            <div>\n              r:&nbsp;\n              <input type=\"text\" value={rgb.r} maxLength=\"3\"\n                onKeyDown={handleKeyDown}\n                onKeyPress={handleKeyPress(255)}\n                onPaste={handlePaste(255)}\n                onBlur={handleRgbBlur('r')}\n                onChange={handleRgbChange('r')}\n              />\n            </div>\n            <div>\n              g:&nbsp;\n              <input type=\"text\" value={rgb.g} maxLength=\"3\"\n                onKeyDown={handleKeyDown}\n                onKeyPress={handleKeyPress(255)}\n                onPaste={handlePaste(255)}\n                onBlur={handleRgbBlur('g')}\n                onChange={handleRgbChange('g')}\n              />\n            </div>\n            <div>\n              b:&nbsp;\n              <input type=\"text\" value={rgb.b} maxLength=\"3\"\n                onKeyDown={handleKeyDown}\n                onKeyPress={handleKeyPress(255)}\n                onPaste={handlePaste(255)}\n                onBlur={handleRgbBlur('b')}\n                onChange={handleRgbChange('b')}\n              />\n            </div>\n          </div>\n          <div className=\"hsl-container\">\n            <span>{`hsl(${hsl.h}, ${hsl.s}%, ${hsl.l}%)`}</span>\n            <div>\n              h:&nbsp;\n              <input type=\"text\" value={hsl.h} maxLength=\"3\"\n                onKeyDown={handleKeyDown}\n                onKeyPress={handleKeyPress(360)}\n                onPaste={handlePaste(360)}\n                onBlur={handleHslBlur('h')}\n                onChange={handleHslChange('h')}\n              />\n            </div>\n            <div>\n              s:&nbsp;\n              <input type=\"text\" value={hsl.s} maxLength=\"3\"\n                onKeyDown={handleKeyDown}\n                onKeyPress={handleKeyPress(100)}\n                onPaste={handlePaste(100)}\n                onBlur={handleHslBlur('s')}\n                onChange={handleHslChange('s')}\n              />\n            </div>\n            <div>\n              l:&nbsp;\n              <input type=\"text\" value={hsl.l} maxLength=\"3\"\n                onKeyDown={handleKeyDown}\n                onKeyPress={handleKeyPress(100)}\n                onPaste={handlePaste(100)}\n                onBlur={handleHslBlur('l')}\n                onChange={handleHslChange('l')}\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Picker;\n","import React, { useState, useCallback } from 'react';\nimport './Swatch.css'\n\nconst Swatch = ({colorId, color, removeColor, changeColor}) => {\n  const [currentColor, setCurrentColor] = useState(color);\n\n  const changeColorToCurrent = useCallback(() => {\n    changeColor(color, currentColor);\n  }, [color, currentColor, changeColor])\n\n  // On blur update the array of colors in the parent scheme\n  const handleBlur = useCallback(e => {\n    changeColor(color, e.target.value);\n  }, [color, changeColor]);\n\n  // On change set the local current color\n  const handleChange = useCallback(e => {\n    setCurrentColor(e.target.value);\n  }, []);\n\n  return (\n    <div className=\"swatch\" style={{backgroundColor: currentColor, color: currentColor.slice(1) < 'a00000' ? '#fff' : '#000'}}>\n      <button onClick={() => {\n          changeColorToCurrent();\n          removeColor(color);\n        }}\n      >\n        Remove\n      </button>\n      <span>{currentColor}</span>\n      <input id={`swatch-input-${colorId}`} type=\"text\" value={currentColor} maxLength=\"7\"\n        onBlur={handleBlur}\n        onChange={handleChange}\n      />\n    </div>\n  );\n}\n\nexport default Swatch;\n","import React, { useState, useCallback } from 'react';\r\nimport Swatch from './Swatch';\r\nimport './Scheme.css'\r\n\r\nconst maxColors = 8;\r\n\r\nconst Scheme = ({schemeId, remove, easelColor}) => {\r\n  const [colors, setColors] = useState([]);\r\n  const [name, setName] = useState(schemeId.split('-').join(' '));\r\n\r\n  const addColor = useCallback(() => {\r\n    if (colors.length >= maxColors || colors.includes(easelColor)) {\r\n      return;\r\n    }\r\n    setColors([...colors, easelColor]);\r\n  }, [colors, easelColor]);\r\n\r\n  const removeColor = useCallback(color => {\r\n    setColors(colors.filter(otherColor => otherColor !== color));\r\n  }, [colors]);\r\n\r\n  const changeColor = useCallback((color, replacement) => {\r\n    setColors(colors.map(otherColor => otherColor !== color ? otherColor : replacement));\r\n  }, [colors]);\r\n\r\n  const rename = useCallback(e => {\r\n    setName(e.target.value);\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"scheme\">\r\n      <div className=\"scheme-name\">\r\n        <input value={name} onChange={rename}/>\r\n      </div>\r\n      <div className=\"scheme-buttons\">\r\n        <button onClick={() => addColor()}>Add Current Color</button>\r\n        <button onClick={() => remove(schemeId)}>Delete Scheme</button>\r\n      </div>\r\n      <div className=\"swatch-container\">\r\n        {colors.map((color, colorId) => (\r\n          <Swatch\r\n            key={`Color-${color}`}\r\n            colorId={colorId}\r\n            color={color}\r\n            removeColor={removeColor}\r\n            changeColor={changeColor}\r\n          />\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Scheme;\r\n","import React, { useState } from 'react';\r\nimport Clipboard from 'clipboard';\r\nimport PickerCreator from '../api/PickerCreator.js';\r\nimport ColorNameUtil from '../api/ColorNameUtil.js';\r\nimport Picker from './Picker';\r\nimport Scheme from './Scheme';\r\nimport './Easel.css';\r\n\r\nconst defaultPickerName = 'colorPicker';\r\n\r\n// Initialize copy to clipboard buttons for Pickers\r\nnew Clipboard('.clip-name');\r\nnew Clipboard('.clip-hex');\r\n\r\nconst colorNameUtil = new ColorNameUtil();\r\n\r\nconst pickerCreator = new PickerCreator(defaultPickerName);\r\nconst [pickerInstance, values] = pickerCreator.generate();\r\n\r\nconst schemeName = 'Scheme-';\r\nlet schemeId = 1;\r\n\r\nconst Easel = () => {\r\n  const [schemes, setSchemes] = useState([]);\r\n  const [easelColor, setEaselColor] = useState(values.hex);\r\n\r\n  const addScheme = () => {\r\n    setSchemes([...schemes, schemeName + schemeId++]);\r\n  };\r\n\r\n  const removeScheme = (scheme) => {\r\n    setSchemes(schemes.filter(otherScheme => otherScheme !== scheme));\r\n  };\r\n\r\n  return (\r\n    <div className=\"easel\">\r\n      <Picker\r\n        key={defaultPickerName}\r\n        pickerInstance={pickerInstance}\r\n        values={values}\r\n        colorNameUtil={colorNameUtil}\r\n        setEaselColor={setEaselColor}\r\n      />\r\n      <div className=\"scheme-container\">\r\n        <button onClick={e => addScheme()}>New Scheme</button>\r\n        {schemes.map(scheme => (\r\n          <Scheme\r\n            key={scheme}\r\n            schemeId={scheme}\r\n            remove={removeScheme}\r\n            easelColor={easelColor}\r\n          />\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Easel;\r\n","import namedColors from 'color-name-list';\r\nimport nearestColor from 'nearest-color';\r\n\r\nexport default class ColorNameUtil {\r\n\r\n  constructor() {\r\n    this.namedColors = namedColors;\r\n    this.nearestColors = nearestColor.from(namedColors.reduce(\r\n                    (o, {name, hex}) => Object.assign(o, {[name]: hex}), {}));\r\n  }\r\n\r\n  getAllColors() {\r\n    return this.namedColors;\r\n  }\r\n\r\n  // Get the exact matching color using a hex color code with '#' prepended\r\n  getColor(hex) {\r\n    return this.namedColors.find(color => color.hex === hex);\r\n  }\r\n\r\n  // Get the exact hex from a color's name\r\n  getHex(colorName) {\r\n    return this.namedColors.find(color => color.name === colorName);\r\n  }\r\n\r\n  // Get the nearest color using a hex color code with '#' prepended\r\n  getNearestColor(hex) {\r\n    return this.nearestColors(hex);\r\n  }\r\n\r\n}\r\n","import iro from '@jaames/iro';\r\n\r\nexport default class PickerCreator {\r\n\r\n  constructor(pickerName) {\r\n    this.pickerName = pickerName;\r\n  }\r\n\r\n  generate() {\r\n    // Create a new color picker instance\r\n    // https://iro.js.org/guide.html#getting-started\r\n    const pickerInstance = new iro.ColorPicker('.' + this.pickerName, {\r\n      // color picker options\r\n      // Option guide: https://iro.js.org/guide.html#color-picker-options\r\n      width: 280,\r\n      color: 'rgb(255, 0, 0)',\r\n      borderWidth: 1,\r\n      borderColor: '#fff',\r\n    });\r\n\r\n    let values = {};\r\n    // https://iro.js.org/guide.html#color-picker-events\r\n    pickerInstance.on(['color:init', 'color:change'], function(color){\r\n      // Show the current color in different formats\r\n      // Using the selected color: https://iro.js.org/guide.html#selected-color-api\r\n      values.hex = color.hexString;\r\n      values.rgb = color.rgb;\r\n      values.hsl = color.hsl;\r\n    });\r\n    return [pickerInstance, values];\r\n  }\r\n}\r\n","import React, { Component } from 'react';\nimport Easel from './components/Easel';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Easel />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n"],"sourceRoot":""}