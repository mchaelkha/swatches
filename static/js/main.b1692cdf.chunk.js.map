{"version":3,"sources":["assets/clippy.svg","api/PickerCreator.js","api/ColorNameUtil.js","api/ColorUtil.js","components/Picker.js","components/Swatch.js","components/Scheme.js","components/Easel.js","App.js","index.js"],"names":["module","exports","PickerCreator","pickerName","this","pickerInstance","iro","ColorPicker","width","color","borderWidth","borderColor","values","on","hex","hexString","rgb","hsl","ColorNameUtil","namedColors","nearestColors","nearestColor","from","reduce","o","name","Object","assign","find","colorName","ColorUtil","input","tinycolor","amount","createColor","spin","toHexString","random","complement","analogous","map","c","monochromatic","splitcomplement","triad","tetrad","outOfBounds","value","max","parseInt","isInvalidInput","RegExp","test","startsWith","length","isInvalidHexInput","isPartialHexInput","convertShortHexToLongHex","hexVal","longHex","index","slice","ch","hasSelection","document","getSelection","toString","selection","createRange","stringToColor","str","hash","i","charCodeAt","substr","Picker","colorNameUtil","setEaselColor","useState","temp","setTemp","setColorName","setHex","setRgb","setHsl","colorPicker","useRef","updateColorName","useCallback","getColor","undefined","getNearestColor","updateRgb","tempRgb","set","updateHsl","tempHsl","updateHex","tempHex","handleKeyDown","e","target","selectionStart","key","handleKeyPress","digits","splice","tempValue","join","preventDefault","handleNamePress","chars","handleHexKeyPress","hexValues","handlePaste","textData","clipboardData","getData","Number","isNaN","count","selectionEnd","handleHexPaste","handleRgbBlur","prop","JSON","parse","stringify","handleHslBlur","handleNameBlur","handleRgbChange","handleHslChange","handleHexChange","handleNameChange","getHex","hexFromName","useEffect","updateValues","isColorChanging","handleMouseDown","current","contains","handleMouseMove","handleMouseUp","addEventListener","removeEventListener","className","ref","style","backgroundColor","id","type","maxLength","onKeyDown","onKeyPress","onBlur","onChange","data-clipboard-target","src","clippy","alt","onPaste","r","g","b","h","s","l","Swatch","removeColor","changeColor","currentColor","setCurrentColor","changeColorToCurrent","handleBlur","handleChange","onClick","minColors","maxColors","colorId","Scheme","schemeId","remove","easelColor","colors","setColors","addColor","colorsCopy","replacement","console","log","split","defaultPickerName","Clipboard","generate","schemeName","Easel","schemes","setSchemes","removeScheme","scheme","schemesCopy","App","Component","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.b1692cdf.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/clippy.c6b23471.svg\";","import iro from '@jaames/iro';\r\n\r\nexport default class PickerCreator {\r\n\r\n  constructor(pickerName) {\r\n    this.pickerName = pickerName;\r\n  }\r\n\r\n  generate() {\r\n    // Create a new color picker instance\r\n    // https://iro.js.org/guide.html#getting-started\r\n    var pickerInstance = new iro.ColorPicker('.' + this.pickerName, {\r\n      // color picker options\r\n      // Option guide: https://iro.js.org/guide.html#color-picker-options\r\n      width: 280,\r\n      color: 'rgb(255, 0, 0)',\r\n      borderWidth: 1,\r\n      borderColor: '#fff',\r\n    });\r\n\r\n    // pickerInstance.color.hexString = '#fff'\r\n    // pickerInstance.color.rgb = { r: 255, g: 255, b: 255};\r\n    // pickerInstance.color.rgbString = 'rgb(255,255,255)';\r\n    // pickerInstance.color.hslString = 'hsl(360, 100%, 50%)';\r\n\r\n    var values = {};\r\n    // https://iro.js.org/guide.html#color-picker-events\r\n    pickerInstance.on(['color:init', 'color:change'], function(color){\r\n      // Show the current color in different formats\r\n      // Using the selected color: https://iro.js.org/guide.html#selected-color-api\r\n      values.hex = color.hexString;\r\n      values.rgb = color.rgb;\r\n      values.hsl = color.hsl;\r\n    });\r\n    return [pickerInstance, values];\r\n  }\r\n}\r\n","import namedColors from 'color-name-list';\r\nimport nearestColor from 'nearest-color';\r\n\r\nexport default class ColorNameUtil {\r\n\r\n  constructor() {\r\n    this.namedColors = namedColors;\r\n    this.nearestColors = nearestColor.from(namedColors.reduce(\r\n                    (o, {name, hex}) => Object.assign(o, {[name]: hex}), {}));\r\n  }\r\n\r\n  getAllColors() {\r\n    return this.namedColors;\r\n  }\r\n\r\n  // Get the exact matching color using a hex color code with '#' prepended\r\n  getColor(hex) {\r\n    return this.namedColors.find(color => color.hex === hex);\r\n  }\r\n\r\n  // Get the exact hex from a color's name\r\n  getHex(colorName) {\r\n    return this.namedColors.find(color => color.name === colorName);\r\n  }\r\n\r\n  // Get the nearest color using a hex color code with '#' prepended\r\n  getNearestColor(hex) {\r\n    return this.nearestColors(hex);\r\n  }\r\n\r\n}\r\n","import tinycolor from 'tinycolor2';\r\n\r\nexport default class ColorUtil {\r\n\r\n  // Create the color object from an input\r\n  createColor(input) {\r\n    return tinycolor(input);\r\n  }\r\n\r\n  // Spin the hue around the color wheel\r\n  spinHue(input, amount) {\r\n    const color = this.createColor(input);\r\n    return color.spin(amount).toHexString();\r\n  }\r\n\r\n  // Get a randomly generated color in hex\r\n  getRandom() {\r\n    return tinycolor.random().toHexString();\r\n  }\r\n\r\n  // Get the complementary color in hex\r\n  getComplementary(input) {\r\n    const color = this.createColor(input);\r\n    return color.complement().toHexString();\r\n  }\r\n\r\n  // Get the analogous colors in hex\r\n  getAnalogous(input) {\r\n    const color = this.createColor(input);\r\n    return color.analogous()\r\n                .map((c) => { return c.toHexString(); });\r\n  }\r\n\r\n  // Get the monochromatic colors in hex\r\n  getMonochromatic(input) {\r\n    const color = this.createColor(input);\r\n    return color.monochromatic()\r\n                .map((c) => { return c.toHexString(); });\r\n  }\r\n\r\n  // Get the splitcomplement colors in hex\r\n  getSplitcomplement(input) {\r\n    const color = this.createColor(input);\r\n    return color.splitcomplement()\r\n                .map((c) => { return c.toHexString(); });\r\n  }\r\n\r\n  // Get the triad colors in hex\r\n  getTriad(input) {\r\n    const color = this.createColor(input);\r\n    return color.triad()\r\n                .map((c) => { return c.toHexString(); });\r\n  }\r\n\r\n  getTetrad(input) {\r\n    const color = this.createColor(input);\r\n    return color.tetrad()\r\n                .map((c) => { return c.toHexString(); });\r\n  }\r\n\r\n}\r\n","import React, {useState, useEffect, useCallback, useRef} from 'react';\r\nimport clippy from '../assets/clippy.svg';\r\nimport './Picker.css';\r\n\r\n// Check if value exceeds max\r\nconst outOfBounds = (value, max) => {\r\n  return parseInt(value, 10) > max;\r\n};\r\n\r\n// Check for invalid HSL and RGB input\r\nconst isInvalidInput = value => {\r\n  const hslRgbPattern = RegExp('^[0-9]{1,3}$');\r\n  return !hslRgbPattern.test(value) ||\r\n  (value.startsWith('0') && value.length > 1);\r\n};\r\n\r\n// Check for invalid Hex input\r\nconst isInvalidHexInput = value => {\r\n  const hexPattern = RegExp('^#?([a-fA-F0-9]{6}|[a-fA-F0-9]{3})$');\r\n  return !hexPattern.test(value);\r\n};\r\n\r\n// Check for partial hex input\r\nconst isPartialHexInput = value => {\r\n  const partialHexPattern = RegExp(`^#([a-fA-F0-9]{0,2}|[a-fA-F0-9]{4,5})$|\r\n  ^([a-fA-F0-9]{1,2}|[a-fA-F0-9]{4,5})$`);\r\n  return partialHexPattern.test(value);\r\n};\r\n\r\n// Convert short hex to long hex when using color names\r\nconst convertShortHexToLongHex = hexVal => {\r\n  var longHex = \"#\";\r\n  const index = hexVal.startsWith('#') ? 1 : 0;\r\n  if (hexVal.length - index === 6) {\r\n    return hexVal;\r\n  }\r\n  for (var ch of hexVal.slice(index)) {\r\n    longHex += ch + ch;\r\n  }\r\n  return longHex;\r\n};\r\n\r\n// Determine if document has a selection\r\nconst hasSelection = () => {\r\n  const selection = document.getSelection() ?\r\n                      document.getSelection().toString() :\r\n                      document.selection.createRange().toString();\r\n  return selection.length > 0;\r\n};\r\n\r\n// Convert any string to a valid hex color\r\nconst stringToColor = str => {\r\n  var hash = 0;\r\n  for (var i = 0; i < str.length; i++) {\r\n    hash = str.charCodeAt(i) + ((hash << 5) - hash);\r\n  }\r\n  var color = '#';\r\n  for (i = 0; i < 3; i++) {\r\n    var value = (hash >> (i * 8)) & 0xFF;\r\n    color += ('00' + value.toString(16)).substr(-2);\r\n  }\r\n  return color;\r\n};\r\n\r\nexport default function Picker({pickerInstance, values, colorNameUtil, setEaselColor}) {\r\n  const [temp, setTemp] = useState('');\r\n  const [colorName, setColorName] = useState('Red');\r\n  const [hex, setHex] = useState(values.hex);\r\n  const [rgb, setRgb] = useState(values.rgb);\r\n  const [hsl, setHsl] = useState(values.hsl);\r\n\r\n  // Ref for event handling in useEffect\r\n  const colorPicker = useRef();\r\n\r\n  // Update the color name when necessary\r\n  const updateColorName = useCallback(() => {\r\n    const longHex = convertShortHexToLongHex(values.hex);\r\n    let color = colorNameUtil.getColor(longHex);\r\n    // Use the nearest color name if not defined\r\n    color = color === undefined ? colorNameUtil.getNearestColor(longHex).name : color.name;\r\n    setColorName(color);\r\n  }, [colorNameUtil, values]);\r\n\r\n  // Update Hex, RGB, and HSL in component as well as the widget\r\n  const updateRgb = useCallback(tempRgb => {\r\n    setRgb(tempRgb);\r\n    pickerInstance.color.set(tempRgb);\r\n    setHex(values.hex);\r\n    setHsl(values.hsl);\r\n    setEaselColor(values.hex);\r\n  }, [pickerInstance.color, values.hex, values.hsl, setEaselColor]);\r\n\r\n  const updateHsl = useCallback(tempHsl => {\r\n    setHsl(tempHsl);\r\n    pickerInstance.color.set(tempHsl);\r\n    setHex(values.hex);\r\n    setRgb(values.rgb);\r\n    setEaselColor(values.hex);\r\n  }, [pickerInstance.color, values.hex, values.rgb, setEaselColor]);\r\n\r\n  const updateHex = useCallback(tempHex => {\r\n    setHex(tempHex);\r\n    // Do not update other values unless hex is valid\r\n    if (!isInvalidHexInput(tempHex)) {\r\n      pickerInstance.color.set(tempHex);\r\n      setRgb(values.rgb);\r\n      setHsl(values.hsl);\r\n      setEaselColor(tempHex);\r\n    }\r\n  }, [pickerInstance.color, values.rgb, values.hsl, setEaselColor]);\r\n\r\n  // On key down, handle backspace and delete properly\r\n  const handleKeyDown = useCallback(e => {\r\n    const index = e.target.selectionStart;\r\n    if (e.target.value.length === 1 &&\r\n      ((e.key === 'Backspace' && index === 1) ||\r\n      (e.key === 'Delete' && index === 0))) {\r\n      e.target.value = '';\r\n    }\r\n  }, []);\r\n\r\n  // On input key press, perform validation for on change event\r\n  const handleKeyPress = useCallback(max => e => {\r\n    var value = e.target.value;\r\n    // If selected and valid key\r\n    if (hasSelection() && /[0-9]/.test(e.key)) {\r\n      return;\r\n    }\r\n    // Validate the key entered; otherwise prevent input\r\n    if (!/[0-9]/.test(e.key) || e.key === 'Enter') {\r\n      e.preventDefault();\r\n      return;\r\n    }\r\n    // If input has characters\r\n    if (value !== '') {\r\n      // Generate the temp value based on where selection started\r\n      var digits = [...value];\r\n      const index = e.target.selectionStart;\r\n      digits.splice(index, 0, e.key);\r\n      var tempValue = digits.join('');\r\n      // If the temp value is invalid, prevent input\r\n      if (isInvalidInput(tempValue) ||\r\n          (value.length === 2 && outOfBounds(tempValue, max))) {\r\n        e.preventDefault();\r\n        return;\r\n      }\r\n      // Valid temp value; set the temp\r\n      setTemp(tempValue);\r\n    }\r\n  }, []);\r\n\r\n  const handleNamePress = useCallback(e => {\r\n    var value = e.target.value;\r\n    // If there is a selection allow input\r\n    if (hasSelection()) {\r\n      // // If replacing entire input, make sure key is upper case\r\n      // if (document.getSelection().toString() === value) {\r\n      //   e.key = e.key.toUpperCase();\r\n      //   setTemp(e.key);\r\n      // }\r\n      return;\r\n    }\r\n    // Only allow these characters for naming conventions\r\n    if (!/[a-zA-Z0-9!@#$%^&*)(+=._-\\s]/.test(e.key) || e.key === 'Enter') {\r\n      e.preventDefault();\r\n      return;\r\n    }\r\n    // If input has characters\r\n    if (value !== '') {\r\n      // Generate the temp value based on where selection started\r\n      var chars = [...value];\r\n      const index = e.target.selectionStart;\r\n      // // If first char, make it upper case\r\n      // if (index === 0 && /[a-z]/.test(e.key)) {\r\n      //   e.key = e.key.toUpperCase();\r\n      // }\r\n      chars.splice(index, 0, e.key);\r\n      var tempValue = chars.join('');\r\n      setTemp(tempValue);\r\n    }\r\n  }, []);\r\n\r\n  const handleHexKeyPress = useCallback(e => {\r\n    var value = e.target.value;\r\n    const index = e.target.selectionStart;\r\n    // If selected and valid key\r\n    if (hasSelection() && /[#a-fA-F0-9]/.test(e.key)) {\r\n      if (e.key === '#' && index !== 0) {\r\n        e.preventDefault();\r\n      }\r\n      return;\r\n    }\r\n    // If input has characters\r\n    if (value !== '') {\r\n      // Validate the key entered; otherwise prevent input\r\n      if (!/[#a-fA-F0-9]/.test(e.key) || e.key === 'Enter') {\r\n        e.preventDefault();\r\n        return;\r\n      }\r\n      // Generate the temp value based on where selection started\r\n      var hexValues = [...value];\r\n      // Validate that # starts on the 0th index\r\n      if (e.key === '#' && index !== 0) {\r\n        e.preventDefault();\r\n        return;\r\n      }\r\n      hexValues.splice(index, 0, e.key);\r\n      var tempValue = hexValues.join('');\r\n      // If the temp value is invalid, prevent input\r\n      if (isInvalidHexInput(tempValue) && !isPartialHexInput(tempValue)) {\r\n        e.preventDefault();\r\n        return;\r\n      }\r\n      // Valid temp value; set the temp\r\n      setTemp(tempValue);\r\n    }\r\n    else if (e.key !== '#') {\r\n      e.preventDefault();\r\n    }\r\n  }, []);\r\n\r\n  // On paste, validate that the text data is within bounds for RGB and HSL\r\n  const handlePaste = useCallback(max => e => {\r\n    const textData = e.clipboardData.getData('text');\r\n    // Text data must be a number\r\n    if (Number.isNaN(parseInt(textData, 10))) {\r\n      e.preventDefault();\r\n      return;\r\n    }\r\n    var value = e.target.value;\r\n    const index = e.target.selectionStart;\r\n    const count = e.target.selectionEnd - index;\r\n    var digits = [...value];\r\n    digits.splice(index, count, textData);\r\n    var tempValue = digits.join('');\r\n    // Prevent if out of bounds\r\n    if (outOfBounds(tempValue, max)) {\r\n      e.preventDefault();\r\n      return;\r\n    }\r\n    setTemp(tempValue);\r\n  }, []);\r\n\r\n  // On paste, validate that the resulting input is a valid or partial Hex\r\n  const handleHexPaste = useCallback(e => {\r\n    const textData = e.clipboardData.getData('text');\r\n    // Prevent other characters\r\n    if (!/[#a-fA-F0-9]+/.test(textData)) {\r\n      e.preventDefault();\r\n      return;\r\n    }\r\n    var value = e.target.value;\r\n    const index = e.target.selectionStart;\r\n    const count = e.target.selectionEnd - index;\r\n    var chars = [...value];\r\n    chars.splice(index, count, textData);\r\n    var tempValue = chars.join('');\r\n    // Prevent if invalid and not a partial\r\n    if (isInvalidHexInput(tempValue) && !isPartialHexInput(tempValue)) {\r\n      e.preventDefault();\r\n      return;\r\n    }\r\n    setTemp(tempValue);\r\n  }, [])\r\n\r\n  // On out of focus and value is empty string, set to default value of 0\r\n  const handleRgbBlur = useCallback(prop => e => {\r\n    if (e.target.value === '') {\r\n      e.target.value = '0';\r\n      var tempRgb = JSON.parse(JSON.stringify(values.rgb));\r\n      tempRgb[prop] = e.target.value;\r\n      updateRgb(tempRgb);\r\n      updateColorName();\r\n    }\r\n  }, [values.rgb, updateRgb, updateColorName]);\r\n\r\n  const handleHslBlur = useCallback(prop => e => {\r\n    if (e.target.value === '') {\r\n      e.target.value = '0';\r\n      var tempHsl = JSON.parse(JSON.stringify(values.hsl));\r\n      tempHsl[prop] = e.target.value;\r\n      updateHsl(tempHsl);\r\n      updateColorName();\r\n    }\r\n  }, [values.hsl, updateHsl, updateColorName]);\r\n\r\n  // On out of focus of color name, update to the actual color name\r\n  const handleNameBlur = useCallback(e => {\r\n    updateColorName();\r\n  }, [updateColorName])\r\n\r\n  // On change, update Hex, RGB, and HSL values\r\n  const handleRgbChange = useCallback(prop => e => {\r\n    if (temp !== '') {\r\n      e.target.value = temp;\r\n      setTemp('');\r\n    }\r\n    var value = e.target.value;\r\n    var tempRgb = JSON.parse(JSON.stringify(values.rgb));\r\n    tempRgb[prop] = value;\r\n    if (value !== '') {\r\n      updateRgb(tempRgb);\r\n      updateColorName();\r\n    } else {\r\n      setRgb(tempRgb);\r\n    }\r\n  }, [temp, values.rgb, updateRgb, updateColorName]);\r\n\r\n  const handleHslChange = useCallback(prop => e => {\r\n    if (temp !== '') {\r\n      e.target.value = temp;\r\n      setTemp('');\r\n    }\r\n    var value = e.target.value;\r\n    var tempHsl = JSON.parse(JSON.stringify(values.hsl));\r\n    tempHsl[prop] = value;\r\n    if (value !== '') {\r\n      updateHsl(tempHsl);\r\n      updateColorName();\r\n    } else {\r\n      setHsl(tempHsl);\r\n    }\r\n  }, [temp, values.hsl, updateHsl, updateColorName]);\r\n\r\n  const handleHexChange = useCallback(e => {\r\n    if (temp !== '') {\r\n      e.target.value = temp;\r\n      setTemp('');\r\n    }\r\n    var value = e.target.value === '' ? '#000' : e.target.value;\r\n    updateHex(value);\r\n    updateColorName();\r\n  }, [temp, updateHex, updateColorName]);\r\n\r\n  const handleNameChange = useCallback(e => {\r\n    const index = e.target.selectionStart;\r\n    if (temp !== '') {\r\n      e.target.value = temp;\r\n      setTemp('');\r\n    }\r\n    var value = e.target.value === '' ? 'Black' : e.target.value;\r\n    const color = colorNameUtil.getHex(value);\r\n    let hexFromName = color === undefined ? stringToColor(value) : color.hex;\r\n    updateHex(hexFromName);\r\n    // Set, but do not update internal values\r\n    setColorName(value);\r\n    // Maintain the selection index\r\n    e.target.selectionStart = index;\r\n    e.target.selectionEnd = index;\r\n  }, [temp, updateHex, colorNameUtil]);\r\n\r\n  useEffect(() => {\r\n    // Define update values\r\n    const updateValues = () => {\r\n      setHex(values.hex);\r\n      setRgb(values.rgb);\r\n      setHsl(values.hsl);\r\n      updateColorName();\r\n      setEaselColor(values.hex);\r\n    }\r\n    // Define mouse events\r\n    let isColorChanging = false;\r\n    const handleMouseDown = e => {\r\n      if (colorPicker.current.contains(e.target)) {\r\n        updateValues();\r\n        isColorChanging = true;\r\n      }\r\n    };\r\n    const handleMouseMove = e => {\r\n      if (isColorChanging) {\r\n        updateValues();\r\n      }\r\n    };\r\n    const handleMouseUp = e => {\r\n      if (isColorChanging) {\r\n        isColorChanging = false;\r\n      }\r\n    }\r\n    // Add the event listeners\r\n    document.addEventListener('mousedown', handleMouseDown);\r\n    document.addEventListener('mousemove', handleMouseMove);\r\n    document.addEventListener('mouseup', handleMouseUp);\r\n    return () => {\r\n      document.removeEventListener('mousedown', handleMouseDown);\r\n      document.removeEventListener('mousemove', handleMouseMove);\r\n      document.removeEventListener('mouseup', handleMouseUp);\r\n    }\r\n  }, [updateColorName, values, setEaselColor]);\r\n\r\n  return (\r\n    <div className=\"picker\">\r\n      <div className={\"colorPicker\"} ref={colorPicker}/>\r\n      <div className=\"colorValues\">\r\n        <div className=\"color-container\" style={{backgroundColor: values.hex}}>\r\n          <div className=\"name-container\">\r\n            <div id=\"name-label\">\r\n              name:&nbsp;\r\n              <input id=\"name-input\" type=\"text\" value={colorName} maxLength=\"40\"\r\n                onKeyDown={handleKeyDown}\r\n                onKeyPress={handleNamePress}\r\n                onBlur={handleNameBlur}\r\n                onChange={handleNameChange}\r\n              />\r\n              <button className=\"clip-name\"\r\n                data-clipboard-target=\"#name-input\"\r\n              >\r\n                <img width=\"14\" src={clippy} alt=\"Copy\" />\r\n              </button>\r\n            </div>\r\n          </div>\r\n          <div className=\"hex-container\">\r\n            <div id=\"hex-label\">\r\n              hex:&nbsp;\r\n              <input id=\"hex-input\" type=\"text\" value={hex} maxLength=\"7\"\r\n                onKeyDown={handleKeyDown}\r\n                onKeyPress={handleHexKeyPress}\r\n                onPaste={handleHexPaste}\r\n                onChange={handleHexChange}\r\n              />\r\n              <button className=\"clip-hex\"\r\n                data-clipboard-target=\"#hex-input\"\r\n              >\r\n                <img width=\"14\" src={clippy} alt=\"Copy\" />\r\n              </button>\r\n            </div>\r\n          </div>\r\n          <div className=\"rgb-container\">\r\n            rgb({rgb.r}, {rgb.g}, {rgb.b})\r\n            <div>\r\n              r:&nbsp;\r\n              <input type=\"text\" value={rgb.r} maxLength=\"3\"\r\n                onKeyDown={handleKeyDown}\r\n                onKeyPress={handleKeyPress(255)}\r\n                onPaste={handlePaste(255)}\r\n                onBlur={handleRgbBlur('r')}\r\n                onChange={handleRgbChange('r')}\r\n              />\r\n            </div>\r\n            <div>\r\n              g:&nbsp;\r\n              <input type=\"text\" value={rgb.g} maxLength=\"3\"\r\n                onKeyDown={handleKeyDown}\r\n                onKeyPress={handleKeyPress(255)}\r\n                onPaste={handlePaste(255)}\r\n                onBlur={handleRgbBlur('g')}\r\n                onChange={handleRgbChange('g')}\r\n              />\r\n            </div>\r\n            <div>\r\n              b:&nbsp;\r\n              <input type=\"text\" value={rgb.b} maxLength=\"3\"\r\n                onKeyDown={handleKeyDown}\r\n                onKeyPress={handleKeyPress(255)}\r\n                onPaste={handlePaste(255)}\r\n                onBlur={handleRgbBlur('b')}\r\n                onChange={handleRgbChange('b')}\r\n              />\r\n            </div>\r\n          </div>\r\n          <div className=\"hsl-container\">\r\n            hsl({hsl.h}, {hsl.s}%, {hsl.l}%)\r\n            <div>\r\n              h:&nbsp;\r\n              <input type=\"text\" value={hsl.h} maxLength=\"3\"\r\n                onKeyDown={handleKeyDown}\r\n                onKeyPress={handleKeyPress(360)}\r\n                onPaste={handlePaste(360)}\r\n                onBlur={handleHslBlur('h')}\r\n                onChange={handleHslChange('h')}\r\n              />\r\n            </div>\r\n            <div>\r\n              s:&nbsp;\r\n              <input type=\"text\" value={hsl.s} maxLength=\"3\"\r\n                onKeyDown={handleKeyDown}\r\n                onKeyPress={handleKeyPress(100)}\r\n                onPaste={handlePaste(100)}\r\n                onBlur={handleHslBlur('s')}\r\n                onChange={handleHslChange('s')}\r\n              />\r\n            </div>\r\n            <div>\r\n              l:&nbsp;\r\n              <input type=\"text\" value={hsl.l} maxLength=\"3\"\r\n                onKeyDown={handleKeyDown}\r\n                onKeyPress={handleKeyPress(100)}\r\n                onPaste={handlePaste(100)}\r\n                onBlur={handleHslBlur('l')}\r\n                onChange={handleHslChange('l')}\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React, {useState, useCallback} from 'react';\r\nimport './Swatch.css'\r\n\r\nexport default function Swatch({color, removeColor, changeColor}) {\r\n  const [currentColor, setCurrentColor] = useState(color);\r\n\r\n  const changeColorToCurrent = useCallback(e => {\r\n    changeColor(color, currentColor);\r\n  }, [color, currentColor, changeColor])\r\n\r\n  // On blur update the array of colors in the parent scheme\r\n  const handleBlur = useCallback(e => {\r\n    changeColor(color, e.target.value);\r\n  }, [color, changeColor]);\r\n\r\n  // On change set the local current color\r\n  const handleChange = useCallback(e => {\r\n    setCurrentColor(e.target.value);\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"swatch\" style={{backgroundColor: currentColor, color: currentColor.slice(1) < 'a00000' ? '#fff' : '#000'}}>\r\n      <button onClick={() => {\r\n          changeColorToCurrent();\r\n          removeColor(currentColor);\r\n        }}\r\n      >\r\n        Remove\r\n      </button>\r\n      <span>{currentColor}</span>\r\n      <input id=\"swatch-input\" type=\"text\" value={currentColor} maxLength=\"7\"\r\n        onBlur={handleBlur}\r\n        onChange={handleChange}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n","import React, {useState, useCallback} from 'react';\r\nimport Swatch from './Swatch';\r\nimport './Scheme.css'\r\n\r\nconst minColors = 3;\r\nconst maxColors = 10;\r\nvar colorId = 0;\r\n\r\nexport default function Scheme({schemeId, remove, easelColor}) {\r\n  const [colors, setColors] = useState(['#ffffff']);\r\n\r\n  const addColor = useCallback(() => {\r\n    if (colors.length >= maxColors) {\r\n      return;\r\n    }\r\n    setColors([...colors, easelColor]);\r\n  }, [colors, easelColor]);\r\n\r\n  const removeColor = useCallback(color => {\r\n    if (colors.length <= minColors) {\r\n      return;\r\n    }\r\n    var colorsCopy = [...colors];\r\n    for (var i = colorsCopy.length - 1; i >= 0; i--) {\r\n      var c = colorsCopy[i];\r\n      if (c === color) {\r\n        colorsCopy.splice(i, 1);\r\n        break;\r\n      }\r\n    }\r\n    setColors(colorsCopy);\r\n  }, [colors]);\r\n\r\n  const changeColor = useCallback((color, replacement) => {\r\n    var colorsCopy = [...colors];\r\n    for (var i = colorsCopy.length - 1; i >= 0; i--) {\r\n      var c = colorsCopy[i];\r\n      if (c === color) {\r\n        console.log(colorsCopy);\r\n        console.log(colorsCopy.splice(i, 1, replacement));\r\n        break;\r\n      }\r\n    }\r\n    setColors(colorsCopy);\r\n    console.log(colors);\r\n  }, [colors]);\r\n\r\n  return (\r\n    <div className=\"scheme\">\r\n      <div className=\"scheme-name\">{schemeId.split('-').join(' ')}</div>\r\n      <div className=\"scheme-buttons\">\r\n        <button onClick={e => addColor()}>Add Current Color</button>\r\n        <button onClick={e => remove(schemeId)}>Delete Scheme</button>\r\n      </div>\r\n      <div className=\"swatch-container\">\r\n        {colors.map(color => (\r\n          <Swatch\r\n            key={'Color-' + colorId++}\r\n            color={color}\r\n            removeColor={removeColor}\r\n            changeColor={changeColor}\r\n          />\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React, {useState} from 'react';\r\nimport Clipboard from 'clipboard';\r\nimport PickerCreator from '../api/PickerCreator.js';\r\nimport ColorNameUtil from '../api/ColorNameUtil.js';\r\nimport ColorUtil from '../api/ColorUtil.js';\r\nimport Picker from './Picker';\r\nimport Scheme from './Scheme';\r\nimport './Easel.css';\r\n\r\nconst defaultPickerName = 'colorPicker';\r\n\r\n// Initialize copy to clipboard buttons for Pickers\r\nnew Clipboard('.clip-name');\r\nnew Clipboard('.clip-hex');\r\n\r\nconst colorNameUtil = new ColorNameUtil();\r\nconst colorUtil = new ColorUtil();\r\n\r\nconst pickerCreator = new PickerCreator(defaultPickerName);\r\nconst [pickerInstance, values] = pickerCreator.generate();\r\n\r\nconst schemeName = 'Scheme-';\r\nvar schemeId = 0;\r\n\r\nexport default function Easel() {\r\n  const [schemes, setSchemes] = useState([]);\r\n  const [easelColor, setEaselColor] = useState(values.hex);\r\n  const [currentSwatch, setCurrentSwatch] = useState(null);\r\n\r\n  const addScheme = () => {\r\n    setSchemes([...schemes, schemeName + schemeId++]);\r\n  };\r\n\r\n  const removeScheme = (scheme) => {\r\n    var schemesCopy = [...schemes];\r\n    for (var i = schemesCopy.length - 1; i >= 0; i--) {\r\n      var s = schemesCopy[i];\r\n      if (s === scheme) {\r\n        schemesCopy.splice(i, 1);\r\n        break;\r\n      }\r\n    }\r\n    setSchemes(schemesCopy);\r\n  };\r\n\r\n  return (\r\n    <div className=\"easel\">\r\n      <Picker\r\n        key={defaultPickerName}\r\n        pickerInstance={pickerInstance}\r\n        values={values}\r\n        colorNameUtil={colorNameUtil}\r\n        setEaselColor={setEaselColor}\r\n      />\r\n      <div className=\"scheme-container\">\r\n        <button onClick={e => addScheme()}>New Scheme</button>\r\n        {schemes.map(scheme => (\r\n          <Scheme\r\n            key={scheme}\r\n            schemeId={scheme}\r\n            remove={removeScheme}\r\n            easelColor={easelColor}\r\n          />\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React, { Component } from 'react';\r\nimport Easel from './components/Easel';\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <p>v0.0.1 Swatches Alpha Testing</p>\r\n        <Easel />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n"],"sourceRoot":""}