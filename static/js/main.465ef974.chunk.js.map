{"version":3,"sources":["assets/clippy.svg","components/Picker.js","components/Swatch.js","components/Scheme.js","components/Easel.js","api/ColorNameUtil.js","api/PickerCreator.js","App.js","index.js"],"names":["clone","rdfc","outOfBounds","value","max","parseInt","isInvalidHexInput","RegExp","test","isPartialHexInput","hasSelection","document","getSelection","toString","selection","createRange","length","Picker","pickerInstance","values","colorNameUtil","setEaselColor","useState","temp","setTemp","colorName","setColorName","hex","setHex","rgb","setRgb","hsl","setHsl","colorPicker","useRef","updateColorName","useCallback","color","getColor","undefined","getNearestColor","name","updateRgb","tempRgb","set","updateHsl","tempHsl","updateHex","tempHex","handleKeyDown","e","index","target","selectionStart","key","handleKeyPress","digits","splice","tempValue","join","startsWith","isInvalidInput","preventDefault","handleNamePress","toUpperCase","chars","handleHexKeyPress","hexValues","handlePaste","textData","clipboardData","getData","Number","isNaN","count","selectionEnd","handleHexPaste","handleRgbBlur","prop","handleHslBlur","handleNameBlur","handleRgbChange","handleHslChange","handleHexChange","handleNameChange","getHex","hexFromName","str","hash","i","charCodeAt","substr","stringToColor","useEffect","updateValues","isColorChanging","handleMouseDown","current","contains","handleMouseMove","handleMouseUp","addEventListener","removeEventListener","className","ref","style","backgroundColor","id","type","maxLength","onKeyDown","onKeyPress","onBlur","onChange","data-clipboard-target","width","src","clippy","alt","onPaste","r","g","b","h","s","l","Swatch","colorId","removeColor","changeColor","currentColor","setCurrentColor","changeColorToCurrent","handleBlur","handleChange","handleRemove","slice","onClick","Scheme","schemeId","remove","easelColor","colors","setColors","split","setName","addColor","includes","filter","otherColor","replacement","map","rename","defaultPickerName","Clipboard","constructor","this","namedColors","nearestColors","nearestColor","from","reduce","o","Object","assign","getAllColors","find","pickerName","generate","iro","ColorPicker","borderWidth","borderColor","on","hexString","Easel","schemes","setSchemes","removeScheme","scheme","otherScheme","App","ReactDOM","render","getElementById"],"mappings":"qWAAe,MAA0B,mCCKnCA,G,MAAQC,OAGRC,EAAc,CAACC,EAAOC,IAAQC,SAASF,EAAO,IAAMC,EAUpDE,EAAqBH,IACNI,OAAO,uCACPC,KAAKL,GAIpBM,EAAqBN,GACCI,OAAO,oFAERC,KAAKL,GAI1BO,EAAe,KACDC,SAASC,eACvBD,SAASC,eAAeC,WACxBF,SAASG,UAAUC,cAAcF,YACpBG,OAAS,EA2ebC,EA1dA,EAAGC,iBAAgBC,SAAQC,gBAAeC,oBAAqB,IAAD,EACnDC,mBAAS,IAD0C,mBACpEC,EADoE,KAC9DC,EAD8D,OAEzCF,mBAAS,OAFgC,mBAEpEG,EAFoE,KAEzDC,EAFyD,OAGrDJ,mBAASH,EAAOQ,KAHqC,mBAGpEA,EAHoE,KAG/DC,EAH+D,OAIrDN,mBAASH,EAAOU,KAJqC,mBAIpEA,EAJoE,KAI/DC,EAJ+D,OAKrDR,mBAASH,EAAOY,KALqC,mBAKpEA,EALoE,KAK/DC,EAL+D,KAerEC,EAAcC,mBAGdC,EAAkBC,uBAAY,KAClC,IAAIC,EAAQjB,EAAckB,SAASnB,EAAOQ,KAE1CU,OAAkBE,IAAVF,EAAsBjB,EAAcoB,gBAAgBrB,EAAOQ,KAAKc,KAAOJ,EAAMI,KACrFf,EAAaW,KACZ,CAACjB,EAAeD,IAGbuB,EAAYN,uBAAaO,IAC7Bb,EAAOa,GACPzB,EAAemB,MAAMO,IAAID,GACzBf,EAAOT,EAAOQ,KACdK,EAAOb,EAAOY,KACdV,EAAcF,EAAOQ,OACpB,CAACT,EAAemB,MAAOlB,EAAOQ,IAAKR,EAAOY,IAAKV,IAE5CwB,EAAYT,uBAAaU,IAC7Bd,EAAOc,GACP5B,EAAemB,MAAMO,IAAIE,GACzBlB,EAAOT,EAAOQ,KACdG,EAAOX,EAAOU,KACdR,EAAcF,EAAOQ,OACpB,CAACT,EAAemB,MAAOlB,EAAOQ,IAAKR,EAAOU,IAAKR,IAE5C0B,EAAYX,uBAAaY,IAC7BpB,EAAOoB,GAEF1C,EAAkB0C,KACrB9B,EAAemB,MAAMO,IAAII,GACzBlB,EAAOX,EAAOU,KACdG,EAAOb,EAAOY,KACdV,EAAc2B,MAEf,CAAC9B,EAAemB,MAAOlB,EAAOU,IAAKV,EAAOY,IAAKV,IAG5C4B,EAAgBb,uBAAac,IACjC,IAAMC,EAAQD,EAAEE,OAAOC,eACO,IAA1BH,EAAEE,OAAOjD,MAAMa,SACF,cAAVkC,EAAEI,KAAiC,IAAVH,GAChB,WAAVD,EAAEI,KAA8B,IAAVH,KAC1BD,EAAEE,OAAOjD,MAAQ,MAElB,IAGGoD,EAAiBnB,uBAAahC,GAAS8C,IAAO,IAC1C/C,EAAU+C,EAAEE,OAAZjD,MAER,IAAIO,MAAkB,QAAQF,KAAK0C,EAAEI,KAIrC,GAAK,QAAQ9C,KAAK0C,EAAEI,MAAkB,UAAVJ,EAAEI,KAK9B,GAAc,KAAVnD,EAAc,CAEhB,IAAMqD,EAAS,IAAIrD,GACbgD,EAAQD,EAAEE,OAAOC,eACvBG,EAAOC,OAAON,EAAO,EAAGD,EAAEI,KAC1B,IAAMI,EAAYF,EAAOG,KAAK,IAE9B,GA5HkBxD,KACAI,OAAO,gBACPC,KAAKL,IACvBA,EAAMyD,WAAW,MAAQzD,EAAMa,OAAS,EAyHpC6C,CAAeH,IACM,IAAjBvD,EAAMa,QAAgBd,EAAYwD,EAAWtD,GAEnD,YADA8C,EAAEY,iBAIJtC,EAAQkC,SAjBRR,EAAEY,mBAmBH,IAEGC,EAAkB3B,uBAAac,IAAM,IAEjC/C,EAAU+C,EAAEE,OAAZjD,MAER,GAAIO,IAEEC,SAASC,eAAeC,aAAeV,IACzC+C,EAAEI,IAAMJ,EAAEI,IAAIU,cACdxC,EAAQ0B,EAAEI,WAKd,GAAK,+BAA+B9C,KAAK0C,EAAEI,MAAkB,UAAVJ,EAAEI,IAKrD,GAAc,KAAVnD,EAAc,CAEhB,IAAM8D,EAAQ,IAAI9D,GACZgD,EAAQD,EAAEE,OAAOC,eACvBY,EAAMR,OAAON,EAAO,EAAGD,EAAEI,KACzB,IAAMI,EAAYO,EAAMN,KAAK,IAC7BnC,EAAQkC,OACH,CAIS,IAFAR,EAAEE,OAAOC,gBAEJ,QAAQ7C,KAAK0C,EAAEI,OAChCJ,EAAEI,IAAMJ,EAAEI,IAAIU,eAEhBxC,EAAQ0B,EAAEI,UAlBVJ,EAAEY,mBAoBH,IAEGI,EAAoB9B,uBAAac,IAAO,IACpC/C,EAAU+C,EAAEE,OAAZjD,MACFgD,EAAQD,EAAEE,OAAOC,eAEvB,GAAI3C,KAAkB,eAAeF,KAAK0C,EAAEI,KAC5B,MAAVJ,EAAEI,KAAyB,IAAVH,GACnBD,EAAEY,sBAKN,GAAc,KAAV3D,EAAc,CAEhB,IAAK,eAAeK,KAAK0C,EAAEI,MAAkB,UAAVJ,EAAEI,IAEnC,YADAJ,EAAEY,iBAIJ,IAAMK,EAAY,IAAIhE,GAEtB,GAAc,MAAV+C,EAAEI,KAAyB,IAAVH,EAEnB,YADAD,EAAEY,iBAGJK,EAAUV,OAAON,EAAO,EAAGD,EAAEI,KAC7B,IAAMI,EAAYS,EAAUR,KAAK,IAEjC,GAAIrD,EAAkBoD,KAAejD,EAAkBiD,GAErD,YADAR,EAAEY,iBAIJtC,EAAQkC,OACW,MAAVR,EAAEI,KACXJ,EAAEY,mBAEH,IAGGM,EAAchC,uBAAahC,GAAS8C,IACxC,IAAMmB,EAAWnB,EAAEoB,cAAcC,QAAQ,QAEzC,GAAIC,OAAOC,MAAMpE,SAASgE,EAAU,KAClCnB,EAAEY,qBADJ,CAH8C,IAOtC3D,EAAU+C,EAAEE,OAAZjD,MACFgD,EAAQD,EAAEE,OAAOC,eACjBqB,EAAQxB,EAAEE,OAAOuB,aAAexB,EAChCK,EAAS,IAAIrD,GACnBqD,EAAOC,OAAON,EAAOuB,EAAOL,GAC5B,IAAMX,EAAYF,EAAOG,KAAK,IAE1BzD,EAAYwD,EAAWtD,GACzB8C,EAAEY,iBAGJtC,EAAQkC,MACP,IAGGkB,EAAiBxC,uBAAac,IAClC,IAAMmB,EAAWnB,EAAEoB,cAAcC,QAAQ,QAEzC,GAAK,gBAAgB/D,KAAK6D,GAA1B,CAHwC,IAOhClE,EAAU+C,EAAEE,OAAZjD,MACFgD,EAAQD,EAAEE,OAAOC,eACjBqB,EAAQxB,EAAEE,OAAOuB,aAAexB,EAChCc,EAAQ,IAAI9D,GAClB8D,EAAMR,OAAON,EAAOuB,EAAOL,GAC3B,IAAMX,EAAYO,EAAMN,KAAK,KAEzBrD,EAAkBoD,IAAejD,EAAkBiD,GAIvDlC,EAAQkC,GAHNR,EAAEY,sBAXFZ,EAAEY,mBAeH,IAGGe,EAAgBzC,uBAAa0C,GAAU5B,IAC3C,GAAuB,KAAnBA,EAAEE,OAAOjD,MAAc,CACzB+C,EAAEE,OAAOjD,MAAQ,IACjB,IAAMwC,EAAU3C,EAAMmB,EAAOU,KAC7Bc,EAAQmC,GAAQ5B,EAAEE,OAAOjD,MACzBuC,EAAUC,GACVR,OAED,CAAChB,EAAOU,IAAKa,EAAWP,IAErB4C,EAAgB3C,uBAAa0C,GAAU5B,IAC3C,GAAuB,KAAnBA,EAAEE,OAAOjD,MAAc,CACzB+C,EAAEE,OAAOjD,MAAQ,IACjB,IAAM2C,EAAU9C,EAAMmB,EAAOY,KAC7Be,EAAQgC,GAAQ5B,EAAEE,OAAOjD,MACzB0C,EAAUC,GACVX,OAED,CAAChB,EAAOY,IAAKc,EAAWV,IAGrB6C,EAAiB5C,uBAAY,KACjCD,MACC,CAACA,IAGE8C,EAAkB7C,uBAAa0C,GAAU5B,IAChC,KAAT3B,IACF2B,EAAEE,OAAOjD,MAAQoB,EACjBC,EAAQ,KAHyC,IAK3CrB,EAAU+C,EAAEE,OAAZjD,MACFwC,EAAU3C,EAAMmB,EAAOU,KAC7Bc,EAAQmC,GAAQ3E,EACF,KAAVA,GACFuC,EAAUC,GACVR,KAEAL,EAAOa,KAER,CAACpB,EAAMJ,EAAOU,IAAKa,EAAWP,IAE3B+C,EAAkB9C,uBAAa0C,GAAU5B,IAChC,KAAT3B,IACF2B,EAAEE,OAAOjD,MAAQoB,EACjBC,EAAQ,KAHyC,IAK3CrB,EAAU+C,EAAEE,OAAZjD,MACF2C,EAAU9C,EAAMmB,EAAOY,KAC7Be,EAAQgC,GAAQ3E,EACF,KAAVA,GACF0C,EAAUC,GACVX,KAEAH,EAAOc,KAER,CAACvB,EAAMJ,EAAOY,IAAKc,EAAWV,IAE3BgD,EAAkB/C,uBAAac,IACtB,KAAT3B,IACF2B,EAAEE,OAAOjD,MAAQoB,EACjBC,EAAQ,KAEV,IAAMrB,EAA2B,KAAnB+C,EAAEE,OAAOjD,MAAe,OAAS+C,EAAEE,OAAOjD,MACxD4C,EAAU5C,GACVgC,MACC,CAACZ,EAAMwB,EAAWZ,IAEfiD,EAAmBhD,uBAAac,IACpC,IAAMC,EAAQD,EAAEE,OAAOC,eACV,KAAT9B,IACF2B,EAAEE,OAAOjD,MAAQoB,EACjBC,EAAQ,KAEV,IAAMrB,EAA2B,KAAnB+C,EAAEE,OAAOjD,MAAe,QAAU+C,EAAEE,OAAOjD,MACnDkC,EAAQjB,EAAciE,OAAOlF,GAC7BmF,OAAwB/C,IAAVF,EA7SDkD,KAErB,IADA,IAAIC,EAAO,EACFC,EAAI,EAAGA,EAAIF,EAAIvE,OAAQyE,IAC9BD,EAAOD,EAAIG,WAAWD,KAAOD,GAAQ,GAAKA,GAG5C,IADA,IAAInD,EAAQ,IACHoD,EAAI,EAAGA,EAAI,EAAGA,IAErBpD,GAAS,aADMmD,GAAa,EAAJC,EAAU,KACb5E,SAAS,KAAO8E,QAAQ,GAE/C,OAAOtD,GAmSqCuD,CAAczF,GAASkC,EAAMV,IACvEoB,EAAUuC,GAEV5D,EAAavB,GAEb+C,EAAEE,OAAOC,eAAiBF,EAC1BD,EAAEE,OAAOuB,aAAexB,IACvB,CAAC5B,EAAMwB,EAAW3B,IAwCrB,OAtCAyE,qBAAU,KAER,IAAMC,EAAe,KACnBlE,EAAOT,EAAOQ,KACdG,EAAOX,EAAOU,KACdG,EAAOb,EAAOY,KACdI,IACAd,EAAcF,EAAOQ,MAGnBoE,GAAkB,EAChBC,EAAmB9C,IACnBjB,EAAYgE,QAAQC,SAAShD,EAAEE,UACjC0C,IACAC,GAAkB,IAGhBI,EAAkB,KAClBJ,GACFD,KAGEM,EAAgB,KAChBL,IACFA,GAAkB,IAOtB,OAHApF,SAAS0F,iBAAiB,YAAaL,GACvCrF,SAAS0F,iBAAiB,YAAaF,GACvCxF,SAAS0F,iBAAiB,UAAWD,GAC9B,KACLzF,SAAS2F,oBAAoB,YAAaN,GAC1CrF,SAAS2F,oBAAoB,YAAaH,GAC1CxF,SAAS2F,oBAAoB,UAAWF,MAEzC,CAACjE,EAAiBhB,EAAQE,IAG3B,sBAAKkF,UAAU,SAAf,UACE,qBAAKA,UAAU,cAAcC,IAAKvE,IAClC,qBAAKsE,UAAU,cAAf,SACE,sBAAKA,UAAU,kBAAkBE,MAAO,CAAEC,gBAAiBvF,EAAOQ,KAAlE,UACE,qBAAK4E,UAAU,iBAAf,SACE,sBAAKI,GAAG,aAAR,sBAEE,uBACEA,GAAG,aACHC,KAAK,OACLzG,MAAOsB,EACPoF,UAAU,KACVC,UAAW7D,EACX8D,WAAYhD,EACZiD,OAAQhC,EACRiC,SAAU7B,IAEZ,wBACEwB,KAAK,SACLL,UAAU,YACVW,wBAAsB,cAHxB,SAKE,qBAAKC,MAAM,KAAKC,IAAKC,EAAQC,IAAI,gBAIvC,qBAAKf,UAAU,gBAAf,SACE,sBAAKI,GAAG,YAAR,qBAEE,uBACEA,GAAG,YACHC,KAAK,OACLzG,MAAOwB,EACPkF,UAAU,IACVC,UAAW7D,EACX8D,WAAY7C,EACZqD,QAAS3C,EACTqC,SAAU9B,IAEZ,wBACEyB,KAAK,SACLL,UAAU,WACVW,wBAAsB,aAHxB,SAKE,qBAAKC,MAAM,KAAKC,IAAKC,EAAQC,IAAI,gBAIvC,sBAAKf,UAAU,gBAAf,UACE,6CAAc1E,EAAI2F,EAAlB,aAAwB3F,EAAI4F,EAA5B,aAAkC5F,EAAI6F,EAAtC,OACA,yCAEE,uBACEd,KAAK,OACLzG,MAAO0B,EAAI2F,EACXX,UAAU,IACVC,UAAW7D,EACX8D,WAAYxD,EAAe,KAC3BgE,QAASnD,EAAY,KACrB4C,OAAQnC,EAAc,KACtBoC,SAAUhC,EAAgB,UAG9B,yCAEE,uBACE2B,KAAK,OACLzG,MAAO0B,EAAI4F,EACXZ,UAAU,IACVC,UAAW7D,EACX8D,WAAYxD,EAAe,KAC3BgE,QAASnD,EAAY,KACrB4C,OAAQnC,EAAc,KACtBoC,SAAUhC,EAAgB,UAG9B,yCAEE,uBACE2B,KAAK,OACLzG,MAAO0B,EAAI6F,EACXb,UAAU,IACVC,UAAW7D,EACX8D,WAAYxD,EAAe,KAC3BgE,QAASnD,EAAY,KACrB4C,OAAQnC,EAAc,KACtBoC,SAAUhC,EAAgB,aAIhC,sBAAKsB,UAAU,gBAAf,UACE,6CAAcxE,EAAI4F,EAAlB,aAAwB5F,EAAI6F,EAA5B,cAAmC7F,EAAI8F,EAAvC,QACA,yCAEE,uBACEjB,KAAK,OACLzG,MAAO4B,EAAI4F,EACXd,UAAU,IACVC,UAAW7D,EACX8D,WAAYxD,EAAe,KAC3BgE,QAASnD,EAAY,KACrB4C,OAAQjC,EAAc,KACtBkC,SAAU/B,EAAgB,UAG9B,yCAEE,uBACE0B,KAAK,OACLzG,MAAO4B,EAAI6F,EACXf,UAAU,IACVC,UAAW7D,EACX8D,WAAYxD,EAAe,KAC3BgE,QAASnD,EAAY,KACrB4C,OAAQjC,EAAc,KACtBkC,SAAU/B,EAAgB,UAG9B,yCAEE,uBACE0B,KAAK,OACLzG,MAAO4B,EAAI8F,EACXhB,UAAU,IACVC,UAAW7D,EACX8D,WAAYxD,EAAe,KAC3BgE,QAASnD,EAAY,KACrB4C,OAAQjC,EAAc,KACtBkC,SAAU/B,EAAgB,sBCtd3B4C,G,MA3CA,EAAGC,UAAS1F,QAAO2F,cAAaC,kBAAmB,IAAD,EACvB3G,mBAASe,GADc,mBACxD6F,EADwD,KAC1CC,EAD0C,KAGzDC,EAAuBhG,uBAAY,KACvC6F,EAAY5F,EAAO6F,KAClB,CAAC7F,EAAO6F,EAAcD,IAGnBI,EAAajG,uBAAac,IAC9B+E,EAAY5F,EAAOa,EAAEE,OAAOjD,SAC3B,CAACkC,EAAO4F,IAGLK,EAAelG,uBAAac,IAChCiF,EAAgBjF,EAAEE,OAAOjD,SACxB,IAEGoI,EAAenG,uBAAY,KAC/BgG,IACAJ,EAAY3F,KACX,IAEH,OACE,sBAAKkE,UAAU,SAASE,MAAO,CAAEC,gBAAiBwB,EAAc7F,MAAO6F,EAAaM,MAAM,GAAK,SAAW,OAAS,QAAnH,UACE,wBACE5B,KAAK,SACL6B,QAAS,IAAMF,IAFjB,oBAMA,+BAAOL,IACP,uBACEvB,GAAE,uBAAkBoB,GACpBnB,KAAK,OACLzG,MAAO+H,EACPrB,UAAU,IACVG,OAAQqB,EACRpB,SAAUqB,SCaHI,G,MA/CA,EAAGC,WAAUC,SAAQC,iBAAkB,IAAD,EACvBvH,mBAAS,IADc,mBAC5CwH,EAD4C,KACpCC,EADoC,OAE3BzH,mBAASqH,EAASK,MAAM,KAAKrF,KAAK,MAFP,mBAE5ClB,EAF4C,KAEtCwG,EAFsC,KAI7CC,EAAW9G,uBAAY,KACvB0G,EAAO9H,QAPG,GAOoB8H,EAAOK,SAASN,IAGlDE,EAAU,IAAID,EAAQD,MACrB,CAACC,EAAQD,IAENb,EAAc5F,uBAAaC,IAC/B0G,EAAUD,EAAOM,QAAQC,GAAeA,IAAehH,OACtD,CAACyG,IAEEb,EAAc7F,uBAAY,CAACC,EAAOiH,KACtCP,EAAUD,EAAOS,KAAKF,GAAgBA,IAAehH,EAAQgH,EAAaC,OACzE,CAACR,IAEEU,EAASpH,uBAAac,IAC1B+F,EAAQ/F,EAAEE,OAAOjD,SAChB,IAEH,OACE,sBAAKoG,UAAU,SAAf,UACE,qBAAKA,UAAU,cAAf,SACE,uBAAOpG,MAAOsC,EAAMwE,SAAUuC,MAEhC,sBAAKjD,UAAU,iBAAf,UACE,wBAAQK,KAAK,SAAS6B,QAAS,IAAMS,IAArC,+BACA,wBAAQtC,KAAK,SAAS6B,QAAS,IAAMG,EAAOD,GAA5C,8BAEF,qBAAKpC,UAAU,mBAAf,SACGuC,EAAOS,KAAI,CAAClH,EAAO0F,IAClB,cAAC,EAAD,CAEEA,QAASA,EACT1F,MAAOA,EACP2F,YAAaA,EACbC,YAAaA,GALf,gBACgB5F,aCjCpBoH,G,MAAoB,eAG1B,IAAIC,IAAU,cACd,IAAIA,IAAU,aAEd,IAAMtI,EAAgB,ICXP,MACbuI,cACEC,KAAKC,YAAcA,IACnBD,KAAKE,cAAgBC,IAAaC,KAAKH,IAAYI,QACjD,CAACC,GAAKzH,OAAMd,SAAUwI,OAAOC,OAAOF,EAAG,CAAE,CAACzH,GAAOd,KAAQ,KAI7D0I,eACE,OAAOT,KAAKC,YAIdvH,SAASX,GACP,OAAOiI,KAAKC,YAAYS,MAAMjI,GAAUA,EAAMV,MAAQA,IAIxD0D,OAAO5D,GACL,OAAOmI,KAAKC,YAAYS,MAAMjI,GAAUA,EAAMI,OAAShB,IAIzDe,gBAAgBb,GACd,OAAOiI,KAAKE,cAAcnI,K,EDXR,IEdP,MACbgI,YAAYY,GACVX,KAAKW,WAAaA,EAGpBC,WAGE,IAQMtJ,EAAiB,IAAIuJ,IAAIC,YAAR,WAAwBd,KAAKW,YARnC,CAGflI,MAAO,iBACPsI,YAAa,EACbC,YAAa,SAKTzJ,EAAS,GASf,OAPAD,EAAe2J,GAAG,CAAC,aAAc,iBAAkBxI,IAGjDlB,EAAOQ,IAAMU,EAAMyI,UACnB3J,EAAOU,IAAMQ,EAAMR,IACnBV,EAAOY,IAAMM,EAAMN,OAEd,CAACb,EAAgBC,KFbYsI,GACOe,W,mBAAxCtJ,E,KAAgBC,E,KAGnBwH,EAAW,EAsCAoC,EApCD,KAAO,IAAD,EACYzJ,mBAAS,IADrB,mBACX0J,EADW,KACFC,EADE,OAEkB3J,mBAASH,EAAOQ,KAFlC,mBAEXkH,EAFW,KAECxH,EAFD,KAQZ6J,EAAgBC,IACpBF,EAAWD,EAAQ5B,QAAQgC,GAAgBA,IAAgBD,MAG7D,OACE,sBAAK5E,UAAU,QAAf,UACE,cAAC,EAAD,CAEErF,eAAgBA,EAChBC,OAAQA,EACRC,cAAeA,EACfC,cAAeA,GAJVoI,GAMP,sBAAKlD,UAAU,mBAAf,UACE,wBAAQK,KAAK,SAAS6B,QAAS,KAjBnCwC,EAAW,IAAID,EARA,UAQsBrC,OAiBjC,wBACCqC,EAAQzB,KAAK4B,GACZ,cAAC,EAAD,CAEExC,SAAUwC,EACVvC,OAAQsC,EACRrC,WAAYA,GAHPsC,YGrCFE,G,MANH,IACV,qBAAK9E,UAAU,MAAf,SACE,cAAC,EAAD,OCDJ+E,IAASC,OAAO,cAAC,EAAD,IAAS5K,SAAS6K,eAAe,W","file":"static/js/main.465ef974.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/clippy.89bd48cb.svg\";","import React, { useState, useEffect, useCallback, useRef } from 'react';\nimport rdfc from 'rfdc';\nimport clippy from '../assets/clippy.svg';\nimport './Picker.css';\n\nconst clone = rdfc();\n\n// Check if value exceeds max\nconst outOfBounds = (value, max) => parseInt(value, 10) > max;\n\n// Check for invalid HSL and RGB input\nconst isInvalidInput = (value) => {\n  const hslRgbPattern = RegExp('^[0-9]{1,3}$');\n  return !hslRgbPattern.test(value)\n  || (value.startsWith('0') && value.length > 1);\n};\n\n// Check for invalid Hex input\nconst isInvalidHexInput = (value) => {\n  const hexPattern = RegExp('^#?([a-fA-F0-9]{6}|[a-fA-F0-9]{3})$');\n  return !hexPattern.test(value);\n};\n\n// Check for partial hex input\nconst isPartialHexInput = (value) => {\n  const partialHexPattern = RegExp(`^#([a-fA-F0-9]{0,2}|[a-fA-F0-9]{4,5})$|\n  ^([a-fA-F0-9]{1,2}|[a-fA-F0-9]{4,5})$`);\n  return partialHexPattern.test(value);\n};\n\n// Determine if document has a selection\nconst hasSelection = () => {\n  const selection = document.getSelection()\n    ? document.getSelection().toString()\n    : document.selection.createRange().toString();\n  return selection.length > 0;\n};\n\n// Convert any string to a valid hex color\nconst stringToColor = (str) => {\n  let hash = 0;\n  for (let i = 0; i < str.length; i++) {\n    hash = str.charCodeAt(i) + ((hash << 5) - hash);\n  }\n  let color = '#';\n  for (let i = 0; i < 3; i++) {\n    const value = (hash >> (i * 8)) & 0xFF;\n    color += (`00${value.toString(16)}`).substr(-2);\n  }\n  return color;\n};\n\nconst Picker = ({ pickerInstance, values, colorNameUtil, setEaselColor }) => {\n  const [temp, setTemp] = useState('');\n  const [colorName, setColorName] = useState('Red');\n  const [hex, setHex] = useState(values.hex);\n  const [rgb, setRgb] = useState(values.rgb);\n  const [hsl, setHsl] = useState(values.hsl);\n  // TODO: Allow ability to toggle what is displayed\n  // const [showOptions, setShowOptions] = useState({\n  //   name: true,\n  //   hex: true,\n  //   rgb: true,\n  //   hsl: true\n  // });\n\n  // Ref for event handling in useEffect\n  const colorPicker = useRef();\n\n  // Update the color name when necessary\n  const updateColorName = useCallback(() => {\n    let color = colorNameUtil.getColor(values.hex);\n    // Use the nearest color name if not defined\n    color = color === undefined ? colorNameUtil.getNearestColor(values.hex).name : color.name;\n    setColorName(color);\n  }, [colorNameUtil, values]);\n\n  // Update Hex, RGB, and HSL in component as well as the widget\n  const updateRgb = useCallback((tempRgb) => {\n    setRgb(tempRgb);\n    pickerInstance.color.set(tempRgb);\n    setHex(values.hex);\n    setHsl(values.hsl);\n    setEaselColor(values.hex);\n  }, [pickerInstance.color, values.hex, values.hsl, setEaselColor]);\n\n  const updateHsl = useCallback((tempHsl) => {\n    setHsl(tempHsl);\n    pickerInstance.color.set(tempHsl);\n    setHex(values.hex);\n    setRgb(values.rgb);\n    setEaselColor(values.hex);\n  }, [pickerInstance.color, values.hex, values.rgb, setEaselColor]);\n\n  const updateHex = useCallback((tempHex) => {\n    setHex(tempHex);\n    // Do not update other values unless hex is valid\n    if (!isInvalidHexInput(tempHex)) {\n      pickerInstance.color.set(tempHex);\n      setRgb(values.rgb);\n      setHsl(values.hsl);\n      setEaselColor(tempHex);\n    }\n  }, [pickerInstance.color, values.rgb, values.hsl, setEaselColor]);\n\n  // On key down, handle backspace and delete properly\n  const handleKeyDown = useCallback((e) => {\n    const index = e.target.selectionStart;\n    if (e.target.value.length === 1\n      && ((e.key === 'Backspace' && index === 1)\n      || (e.key === 'Delete' && index === 0))) {\n      e.target.value = '';\n    }\n  }, []);\n\n  // On input key press, perform validation for on change event\n  const handleKeyPress = useCallback((max) => (e) => {\n    const { value } = e.target;\n    // If selected and valid key\n    if (hasSelection() && /[0-9]/.test(e.key)) {\n      return;\n    }\n    // Validate the key entered; otherwise prevent input\n    if (!/[0-9]/.test(e.key) || e.key === 'Enter') {\n      e.preventDefault();\n      return;\n    }\n    // If input has characters\n    if (value !== '') {\n      // Generate the temp value based on where selection started\n      const digits = [...value];\n      const index = e.target.selectionStart;\n      digits.splice(index, 0, e.key);\n      const tempValue = digits.join('');\n      // If the temp value is invalid, prevent input\n      if (isInvalidInput(tempValue)\n          || (value.length === 2 && outOfBounds(tempValue, max))) {\n        e.preventDefault();\n        return;\n      }\n      // Valid temp value; set the temp\n      setTemp(tempValue);\n    }\n  }, []);\n\n  const handleNamePress = useCallback((e) => {\n    // Value before e.key is added\n    const { value } = e.target;\n    // If there is a selection allow input\n    if (hasSelection()) {\n      // If replacing entire input, make sure key is upper case\n      if (document.getSelection().toString() === value) {\n        e.key = e.key.toUpperCase();\n        setTemp(e.key);\n      }\n      return;\n    }\n    // Only allow these characters for naming conventions\n    if (!/[a-zA-Z0-9!@#$%^&*)(+=._-\\s]/.test(e.key) || e.key === 'Enter') {\n      e.preventDefault();\n      return;\n    }\n    // If input has characters\n    if (value !== '') {\n      // Generate the temp value based on where selection started\n      const chars = [...value];\n      const index = e.target.selectionStart;\n      chars.splice(index, 0, e.key);\n      const tempValue = chars.join('');\n      setTemp(tempValue);\n    } else {\n      // Handle backspace to capitalize first char\n      const index = e.target.selectionStart;\n      // first char, make it upper case\n      if (index === 0 && /[a-z]/.test(e.key)) {\n        e.key = e.key.toUpperCase();\n      }\n      setTemp(e.key);\n    }\n  }, []);\n\n  const handleHexKeyPress = useCallback((e) => {\n    const { value } = e.target;\n    const index = e.target.selectionStart;\n    // If selected and valid key\n    if (hasSelection() && /[#a-fA-F0-9]/.test(e.key)) {\n      if (e.key === '#' && index !== 0) {\n        e.preventDefault();\n      }\n      return;\n    }\n    // If input has characters\n    if (value !== '') {\n      // Validate the key entered; otherwise prevent input\n      if (!/[#a-fA-F0-9]/.test(e.key) || e.key === 'Enter') {\n        e.preventDefault();\n        return;\n      }\n      // Generate the temp value based on where selection started\n      const hexValues = [...value];\n      // Validate that # starts on the 0th index\n      if (e.key === '#' && index !== 0) {\n        e.preventDefault();\n        return;\n      }\n      hexValues.splice(index, 0, e.key);\n      const tempValue = hexValues.join('');\n      // If the temp value is invalid, prevent input\n      if (isInvalidHexInput(tempValue) && !isPartialHexInput(tempValue)) {\n        e.preventDefault();\n        return;\n      }\n      // Valid temp value; set the temp\n      setTemp(tempValue);\n    } else if (e.key !== '#') {\n      e.preventDefault();\n    }\n  }, []);\n\n  // On paste, validate that the text data is within bounds for RGB and HSL\n  const handlePaste = useCallback((max) => (e) => {\n    const textData = e.clipboardData.getData('text');\n    // Text data must be a number\n    if (Number.isNaN(parseInt(textData, 10))) {\n      e.preventDefault();\n      return;\n    }\n    const { value } = e.target;\n    const index = e.target.selectionStart;\n    const count = e.target.selectionEnd - index;\n    const digits = [...value];\n    digits.splice(index, count, textData);\n    const tempValue = digits.join('');\n    // Prevent if out of bounds\n    if (outOfBounds(tempValue, max)) {\n      e.preventDefault();\n      return;\n    }\n    setTemp(tempValue);\n  }, []);\n\n  // On paste, validate that the resulting input is a valid or partial Hex\n  const handleHexPaste = useCallback((e) => {\n    const textData = e.clipboardData.getData('text');\n    // Prevent other characters\n    if (!/[#a-fA-F0-9]+/.test(textData)) {\n      e.preventDefault();\n      return;\n    }\n    const { value } = e.target;\n    const index = e.target.selectionStart;\n    const count = e.target.selectionEnd - index;\n    const chars = [...value];\n    chars.splice(index, count, textData);\n    const tempValue = chars.join('');\n    // Prevent if invalid and not a partial\n    if (isInvalidHexInput(tempValue) && !isPartialHexInput(tempValue)) {\n      e.preventDefault();\n      return;\n    }\n    setTemp(tempValue);\n  }, []);\n\n  // On out of focus and value is empty string, set to default value of 0\n  const handleRgbBlur = useCallback((prop) => (e) => {\n    if (e.target.value === '') {\n      e.target.value = '0';\n      const tempRgb = clone(values.rgb);\n      tempRgb[prop] = e.target.value;\n      updateRgb(tempRgb);\n      updateColorName();\n    }\n  }, [values.rgb, updateRgb, updateColorName]);\n\n  const handleHslBlur = useCallback((prop) => (e) => {\n    if (e.target.value === '') {\n      e.target.value = '0';\n      const tempHsl = clone(values.hsl);\n      tempHsl[prop] = e.target.value;\n      updateHsl(tempHsl);\n      updateColorName();\n    }\n  }, [values.hsl, updateHsl, updateColorName]);\n\n  // On out of focus of color name, update to the actual color name\n  const handleNameBlur = useCallback(() => {\n    updateColorName();\n  }, [updateColorName]);\n\n  // On change, update Hex, RGB, and HSL values\n  const handleRgbChange = useCallback((prop) => (e) => {\n    if (temp !== '') {\n      e.target.value = temp;\n      setTemp('');\n    }\n    const { value } = e.target;\n    const tempRgb = clone(values.rgb);\n    tempRgb[prop] = value;\n    if (value !== '') {\n      updateRgb(tempRgb);\n      updateColorName();\n    } else {\n      setRgb(tempRgb);\n    }\n  }, [temp, values.rgb, updateRgb, updateColorName]);\n\n  const handleHslChange = useCallback((prop) => (e) => {\n    if (temp !== '') {\n      e.target.value = temp;\n      setTemp('');\n    }\n    const { value } = e.target;\n    const tempHsl = clone(values.hsl);\n    tempHsl[prop] = value;\n    if (value !== '') {\n      updateHsl(tempHsl);\n      updateColorName();\n    } else {\n      setHsl(tempHsl);\n    }\n  }, [temp, values.hsl, updateHsl, updateColorName]);\n\n  const handleHexChange = useCallback((e) => {\n    if (temp !== '') {\n      e.target.value = temp;\n      setTemp('');\n    }\n    const value = e.target.value === '' ? '#000' : e.target.value;\n    updateHex(value);\n    updateColorName();\n  }, [temp, updateHex, updateColorName]);\n\n  const handleNameChange = useCallback((e) => {\n    const index = e.target.selectionStart;\n    if (temp !== '') {\n      e.target.value = temp;\n      setTemp('');\n    }\n    const value = e.target.value === '' ? 'Black' : e.target.value;\n    const color = colorNameUtil.getHex(value);\n    const hexFromName = color === undefined ? stringToColor(value) : color.hex;\n    updateHex(hexFromName);\n    // Set, but do not update internal values\n    setColorName(value);\n    // Maintain the selection index\n    e.target.selectionStart = index;\n    e.target.selectionEnd = index;\n  }, [temp, updateHex, colorNameUtil]);\n\n  useEffect(() => {\n    // Define update values\n    const updateValues = () => {\n      setHex(values.hex);\n      setRgb(values.rgb);\n      setHsl(values.hsl);\n      updateColorName();\n      setEaselColor(values.hex);\n    };\n    // Define mouse events\n    let isColorChanging = false;\n    const handleMouseDown = (e) => {\n      if (colorPicker.current.contains(e.target)) {\n        updateValues();\n        isColorChanging = true;\n      }\n    };\n    const handleMouseMove = () => {\n      if (isColorChanging) {\n        updateValues();\n      }\n    };\n    const handleMouseUp = () => {\n      if (isColorChanging) {\n        isColorChanging = false;\n      }\n    };\n    // Add the event listeners\n    document.addEventListener('mousedown', handleMouseDown);\n    document.addEventListener('mousemove', handleMouseMove);\n    document.addEventListener('mouseup', handleMouseUp);\n    return () => {\n      document.removeEventListener('mousedown', handleMouseDown);\n      document.removeEventListener('mousemove', handleMouseMove);\n      document.removeEventListener('mouseup', handleMouseUp);\n    };\n  }, [updateColorName, values, setEaselColor]);\n\n  return (\n    <div className=\"picker\">\n      <div className=\"colorPicker\" ref={colorPicker} />\n      <div className=\"colorValues\">\n        <div className=\"color-container\" style={{ backgroundColor: values.hex }}>\n          <div className=\"name-container\">\n            <div id=\"name-label\">\n              name:&nbsp;\n              <input\n                id=\"name-input\"\n                type=\"text\"\n                value={colorName}\n                maxLength=\"40\"\n                onKeyDown={handleKeyDown}\n                onKeyPress={handleNamePress}\n                onBlur={handleNameBlur}\n                onChange={handleNameChange}\n              />\n              <button\n                type=\"button\"\n                className=\"clip-name\"\n                data-clipboard-target=\"#name-input\"\n              >\n                <img width=\"14\" src={clippy} alt=\"Copy\" />\n              </button>\n            </div>\n          </div>\n          <div className=\"hex-container\">\n            <div id=\"hex-label\">\n              hex:&nbsp;\n              <input\n                id=\"hex-input\"\n                type=\"text\"\n                value={hex}\n                maxLength=\"7\"\n                onKeyDown={handleKeyDown}\n                onKeyPress={handleHexKeyPress}\n                onPaste={handleHexPaste}\n                onChange={handleHexChange}\n              />\n              <button\n                type=\"button\"\n                className=\"clip-hex\"\n                data-clipboard-target=\"#hex-input\"\n              >\n                <img width=\"14\" src={clippy} alt=\"Copy\" />\n              </button>\n            </div>\n          </div>\n          <div className=\"rgb-container\">\n            <span>{`rgb(${rgb.r}, ${rgb.g}, ${rgb.b})`}</span>\n            <div>\n              r:&nbsp;\n              <input\n                type=\"text\"\n                value={rgb.r}\n                maxLength=\"3\"\n                onKeyDown={handleKeyDown}\n                onKeyPress={handleKeyPress(255)}\n                onPaste={handlePaste(255)}\n                onBlur={handleRgbBlur('r')}\n                onChange={handleRgbChange('r')}\n              />\n            </div>\n            <div>\n              g:&nbsp;\n              <input\n                type=\"text\"\n                value={rgb.g}\n                maxLength=\"3\"\n                onKeyDown={handleKeyDown}\n                onKeyPress={handleKeyPress(255)}\n                onPaste={handlePaste(255)}\n                onBlur={handleRgbBlur('g')}\n                onChange={handleRgbChange('g')}\n              />\n            </div>\n            <div>\n              b:&nbsp;\n              <input\n                type=\"text\"\n                value={rgb.b}\n                maxLength=\"3\"\n                onKeyDown={handleKeyDown}\n                onKeyPress={handleKeyPress(255)}\n                onPaste={handlePaste(255)}\n                onBlur={handleRgbBlur('b')}\n                onChange={handleRgbChange('b')}\n              />\n            </div>\n          </div>\n          <div className=\"hsl-container\">\n            <span>{`hsl(${hsl.h}, ${hsl.s}%, ${hsl.l}%)`}</span>\n            <div>\n              h:&nbsp;\n              <input\n                type=\"text\"\n                value={hsl.h}\n                maxLength=\"3\"\n                onKeyDown={handleKeyDown}\n                onKeyPress={handleKeyPress(360)}\n                onPaste={handlePaste(360)}\n                onBlur={handleHslBlur('h')}\n                onChange={handleHslChange('h')}\n              />\n            </div>\n            <div>\n              s:&nbsp;\n              <input\n                type=\"text\"\n                value={hsl.s}\n                maxLength=\"3\"\n                onKeyDown={handleKeyDown}\n                onKeyPress={handleKeyPress(100)}\n                onPaste={handlePaste(100)}\n                onBlur={handleHslBlur('s')}\n                onChange={handleHslChange('s')}\n              />\n            </div>\n            <div>\n              l:&nbsp;\n              <input\n                type=\"text\"\n                value={hsl.l}\n                maxLength=\"3\"\n                onKeyDown={handleKeyDown}\n                onKeyPress={handleKeyPress(100)}\n                onPaste={handlePaste(100)}\n                onBlur={handleHslBlur('l')}\n                onChange={handleHslChange('l')}\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Picker;\n","import React, { useState, useCallback } from 'react';\nimport './Swatch.css';\n\nconst Swatch = ({ colorId, color, removeColor, changeColor }) => {\n  const [currentColor, setCurrentColor] = useState(color);\n\n  const changeColorToCurrent = useCallback(() => {\n    changeColor(color, currentColor);\n  }, [color, currentColor, changeColor]);\n\n  // On blur update the array of colors in the parent scheme\n  const handleBlur = useCallback((e) => {\n    changeColor(color, e.target.value);\n  }, [color, changeColor]);\n\n  // On change set the local current color\n  const handleChange = useCallback((e) => {\n    setCurrentColor(e.target.value);\n  }, []);\n\n  const handleRemove = useCallback(() => {\n    changeColorToCurrent();\n    removeColor(color);\n  }, []);\n\n  return (\n    <div className=\"swatch\" style={{ backgroundColor: currentColor, color: currentColor.slice(1) < 'a00000' ? '#fff' : '#000' }}>\n      <button\n        type=\"button\"\n        onClick={() => handleRemove()}\n      >\n        Remove\n      </button>\n      <span>{currentColor}</span>\n      <input\n        id={`swatch-input-${colorId}`}\n        type=\"text\"\n        value={currentColor}\n        maxLength=\"7\"\n        onBlur={handleBlur}\n        onChange={handleChange}\n      />\n    </div>\n  );\n};\n\nexport default Swatch;\n","import React, { useState, useCallback } from 'react';\nimport Swatch from './Swatch';\nimport './Scheme.css';\n\nconst maxColors = 8;\n\nconst Scheme = ({ schemeId, remove, easelColor }) => {\n  const [colors, setColors] = useState([]);\n  const [name, setName] = useState(schemeId.split('-').join(' '));\n\n  const addColor = useCallback(() => {\n    if (colors.length >= maxColors || colors.includes(easelColor)) {\n      return;\n    }\n    setColors([...colors, easelColor]);\n  }, [colors, easelColor]);\n\n  const removeColor = useCallback((color) => {\n    setColors(colors.filter((otherColor) => otherColor !== color));\n  }, [colors]);\n\n  const changeColor = useCallback((color, replacement) => {\n    setColors(colors.map((otherColor) => (otherColor !== color ? otherColor : replacement)));\n  }, [colors]);\n\n  const rename = useCallback((e) => {\n    setName(e.target.value);\n  }, []);\n\n  return (\n    <div className=\"scheme\">\n      <div className=\"scheme-name\">\n        <input value={name} onChange={rename} />\n      </div>\n      <div className=\"scheme-buttons\">\n        <button type=\"button\" onClick={() => addColor()}>Add Current Color</button>\n        <button type=\"button\" onClick={() => remove(schemeId)}>Delete Scheme</button>\n      </div>\n      <div className=\"swatch-container\">\n        {colors.map((color, colorId) => (\n          <Swatch\n            key={`Color-${color}`}\n            colorId={colorId}\n            color={color}\n            removeColor={removeColor}\n            changeColor={changeColor}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default Scheme;\n","import React, { useState } from 'react';\nimport Clipboard from 'clipboard';\nimport PickerCreator from '../api/PickerCreator';\nimport ColorNameUtil from '../api/ColorNameUtil';\nimport Picker from './Picker';\nimport Scheme from './Scheme';\nimport './Easel.css';\n\nconst defaultPickerName = 'colorPicker';\n\n// Initialize copy to clipboard buttons for Pickers\nnew Clipboard('.clip-name');\nnew Clipboard('.clip-hex');\n\nconst colorNameUtil = new ColorNameUtil();\n\nconst pickerCreator = new PickerCreator(defaultPickerName);\nconst [pickerInstance, values] = pickerCreator.generate();\n\nconst schemeName = 'Scheme-';\nlet schemeId = 1;\n\nconst Easel = () => {\n  const [schemes, setSchemes] = useState([]);\n  const [easelColor, setEaselColor] = useState(values.hex);\n\n  const addScheme = () => {\n    setSchemes([...schemes, schemeName + schemeId++]);\n  };\n\n  const removeScheme = (scheme) => {\n    setSchemes(schemes.filter((otherScheme) => otherScheme !== scheme));\n  };\n\n  return (\n    <div className=\"easel\">\n      <Picker\n        key={defaultPickerName}\n        pickerInstance={pickerInstance}\n        values={values}\n        colorNameUtil={colorNameUtil}\n        setEaselColor={setEaselColor}\n      />\n      <div className=\"scheme-container\">\n        <button type=\"button\" onClick={() => addScheme()}>New Scheme</button>\n        {schemes.map((scheme) => (\n          <Scheme\n            key={scheme}\n            schemeId={scheme}\n            remove={removeScheme}\n            easelColor={easelColor}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default Easel;\n","import namedColors from 'color-name-list';\nimport nearestColor from 'nearest-color';\n\nexport default class ColorNameUtil {\n  constructor() {\n    this.namedColors = namedColors;\n    this.nearestColors = nearestColor.from(namedColors.reduce(\n      (o, { name, hex }) => Object.assign(o, { [name]: hex }), {},\n    ));\n  }\n\n  getAllColors() {\n    return this.namedColors;\n  }\n\n  // Get the exact matching color using a hex color code with '#' prepended\n  getColor(hex) {\n    return this.namedColors.find((color) => color.hex === hex);\n  }\n\n  // Get the exact hex from a color's name\n  getHex(colorName) {\n    return this.namedColors.find((color) => color.name === colorName);\n  }\n\n  // Get the nearest color using a hex color code with '#' prepended\n  getNearestColor(hex) {\n    return this.nearestColors(hex);\n  }\n}\n","import iro from '@jaames/iro';\n\nexport default class PickerCreator {\n  constructor(pickerName) {\n    this.pickerName = pickerName;\n  }\n\n  generate() {\n    // Create a new color picker instance\n    // https://iro.js.org/guide.html#getting-started\n    const settings = {\n      // color picker options\n      // Option guide: https://iro.js.org/guide.html#color-picker-options\n      color: 'rgb(255, 0, 0)',\n      borderWidth: 1,\n      borderColor: '#fff',\n    };\n\n    const pickerInstance = new iro.ColorPicker(`.${this.pickerName}`, settings);\n\n    const values = {};\n    // https://iro.js.org/guide.html#color-picker-events\n    pickerInstance.on(['color:init', 'color:change'], (color) => {\n      // Show the current color in different formats\n      // Using the selected color: https://iro.js.org/guide.html#selected-color-api\n      values.hex = color.hexString;\n      values.rgb = color.rgb;\n      values.hsl = color.hsl;\n    });\n    return [pickerInstance, values];\n  }\n}\n","import React from 'react';\nimport Easel from './components/Easel';\nimport './App.css';\n\nconst App = () => (\n  <div className=\"App\">\n    <Easel />\n  </div>\n);\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}